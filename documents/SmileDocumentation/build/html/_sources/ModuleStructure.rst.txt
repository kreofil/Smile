Организация модульной структуры
=================================

В данном подразделе предполагается сформировать описание модульной структуры языка Smile.
Основная идея заключается в раздельном формировании артефактов и их объединении в автономные структуры.
Изначальное название этих структур - репозитории. Однако со временем происходит переосмысление общей организации артефактов.
В данном случае оно направлено на упрощение.

Изначально предполагалось, что репозитории обеспечивают иерархическое (или псевдоиерархическое) образование, в котором имя артефакта дополнительно разделяется (точками) на подъимена, что позволяет интерпретировать некоторую вложенность. Однако в настоящее время основной идеей является отказ от подобной вложенности, что обеспечивается заданием имен без точек. То есть предполагается на данном этапе полностью отказаться от иерархии, а формировать каждое отдельное автономное хранилище артефактов как их одноуровневый набор. Поэтому каждый артефакт будет задаваться только своим именем одного уровня (без точки).
Полученное хранилище уже не имеет смысла называть репозиторием. Больше подходит одно из названий: сборка, пакет, модуль. По всей видимости, пока остановлюсь на пакете.

Наряду с этим в языке предполагается перегрузка имен функций. Это предполагает идентификацию по дополнительным параметрам, определяющим сигнатуру. Здесь нужно будет подумать над тем, как в рамках этой перегрузки будут формировать процедурно-параметрические обобщения.

Организация программного кода
-----------------------------------

Основной автономной единицей системы программирования является пакет, который содержит множество артефактов, разрабатываемых программистом. К артефактам относятся функции, типы, константы и прочие программные объекты, из которых создаются программы. Каждый артефакт хранится отдельно от других артефактов и является независимой программной единицей. В текущей разработке каждый артефакт хранится в отдельном файле. В дальнейшем предполагается возможность использовать БД, в которой каждый артефакт планируется представлять отдельной записью.

Пакет содержит следующие данные:

    * исходные тексты артефактов;
    * реверсивные информационные графы артефактов, получаемые во время компиляции;
    * список, задающий описание экспорта пакета;
    * списки с описаниями экспортов импортируемых пакетов

Предполагается, что весь программный код состоит из множества пакетовв. Программа представляетс собой функцию из некоторого пакета для выполнение которой могут потребоваться другие функции, константы, типы и прочие артефакты, которые могут браться как из текущего пакета, так и импортироваться из других пакетов.

Общую иерархическую структуру пакета можно представить следующими образом:

::

    пакет ::= 
        src
        rig
        import
        export

Программа формируется из отдельных артефактов (сущностей, программных объектов), каждый из которых размещается в своей единице хранения. На текущий момент единицей хранения является файл. В перспективе в качестве единицы хранения предполагается использовать запись в таблице базы данных (БД).

Таблица экспорта - единица хранения с описанием всех доступных артефактов (списком артефактов). В отличие от определения артефактов их описания содержать только информацию, необходимую для использования другими артефактами.

Наряду с таблицей экспорта возможны и другие аналогичные таблицы, которые могут содержать списки приватных описаний, доступных только разработчикам данного пакета. 

.. note::

    Пока данные таблицы не реализуются из-за упрощения первой версии системы программирования.

Виды артефактов:

#. Константа (константное выражение)
#. Функция (описание или определение)
#. Тип
#. Импорт
#. Хранилище (значение или переменная)?

Программа
----------

Программа - это стартовая (запускаемая) функция. То есть, программой может являться любая функция пакета.

Пакет - это множество артефактов, собранных в единое хранилище (в денном случае это каталог) и таблица экспорта.

Таблица экспорта доступна из других пакетов через импорт, что позволяет собирать программу из артефактов, размещеннных в разных пакетах.

Стартовая функция может обращаться к другим артефактам, что в целом определяет программу как сложный артефакт, состоящий из иерархически выстроенных артефактов.

