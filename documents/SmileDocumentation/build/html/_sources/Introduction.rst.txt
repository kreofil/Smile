Введение
===============

Концепция архитектурно-независимого параллельного программирования (АНПП) на текущий момент не находит приверженцев. Мои прогнозы относительно путей развития методов параллельного программирования, сформулированные в конце девяностых, не оправдались. По прошествии практически уже двадцати с лишним лет разработка параллельных программ остается привязанной к особенностям архитектур конкретных параллельных вычислительных систем (ПВС). Меняются архитектуры параллельных компьютеров, но все также неизменным остается подход, направленный на прямое программирование для каждой из таких архитектур и не рассматривающий общую теорию параллельных программ в качестве первоосновы.

В настоящее время практически не видно и не слышно работ, анализирующих особенности построения программ как некоторой универсальной сущности, напрямую не связанных с конкретным реальным вычислителем. Можно, правда, отметить работы Алеевой [Алеева-(ПАВТ2019, ...)], направленных на использование Q-детерминанта. Также близкую тему затрагивают работы по созданию спецвычислителей на ПЛИС, выполняемые Левиным И.И. и компанией [Levin-ПАВТ2018]. Но больше ничего конкретного назвать не могу. Поэтому остается **верить**, что то, чем в рамках научных исследований я занимаюсь, не является тупиковой ветвью и когда-нибудь (желательно как можно быстрее, пока я нахожусь в ясном уме и трезвой памяти) выстрелит.

Исходя из этого я продолжаю развивать концепцию архитектурно-независимого параллельного программирования на основе функционально-потоковой парадигмы, основной идеей которой является написание программ не связанных с ресурсными ограничениями реальных ПВС. В рамках этой концепции ключевым аспектом является эффективная трансформация архитектурно-независимых параллельных программ в уже существующие архитектуры, а не их непосредственное выполнение на специально создаваемых системах. Однако на текущий момент разработанный язык функционально-потокового параллельного программирования (ЯФППП) Пифагор ориентирован на динамическую типизацию, что не позволяет обеспечить для него гибкую трансформацию. Помимо этого операторы функционально-потоковой модели параллельных вычислений (ФПМПВ) в большинстве своем ориентированы на динамическую организацию данных и хранение элементов произвольного типа, что также является ограничивающим фактором для преобразований архитектурно-независимых параллельных программ в ресурсно-зависимую форму. Поэтому для дальнейшего продолжения работ необходимо сформировать такую концепцию модели вычислений и языка программирования на ее основе, которая бы обеспечила поддержку более эффективных трансформаций.

Подобные концепции в настоящее время обычно опираются на статическую типизацию и организацию данных, размерность которых и внутренняя структура в основном определяются на этапе компиляции. Внедрение этих идей требует пересмотра ряда понятий лежащих в основе уже разработанных ФПМПВ и ЯФППП. Поэтому планируется формирования другой модели, ориентированной на поддержку новых идей и обеспечивающей основу для создания соответствующего языка. Предполагается разработка статически типизированной модели функционально-потоковых параллельных вычислений (СТМФППВ), которая должна лежать в основе соответствующего статически типизированного ЯФППП (СТЯФППП) Smile. Название языка выбрано исходя из давно возникших ассоциаций с тем, что многие из формируемых в процесс написания программ сочетаний символов образуют комбинации, напоминающие смайлики. Это определло выбор смайлика "**:-)**" в качестве символа языка.



