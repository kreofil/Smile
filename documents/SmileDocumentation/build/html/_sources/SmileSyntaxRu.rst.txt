Синтаксис языка программирования Smile
============================================

Лексемы
---------

::

    Сигнал = "!".

::

    Целое = {/ Цифра /}.

::

    Булевская = "false" | "true".

::

    Спецзнак = "+" | "-" | "*" | "/" | "%" | ...

::

    Цифра = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9".

::

    Буква = "A" | ... | "Z" | "a" | ... | "z".

::

    Идентификатор = (Буква | "_") {Буква | "_" | Цифра}.

::

    ИменованныйТип = Идентификатор [ "." Идентификатор ].

::

    ИмяДоступа = Идентификатор [ "." Идентификатор ].

Программные объекты
----------------------

::

    Артефакт = Имя "<<" ОпределениеАртефакта
             | ОпределениеАртефакта ">>" Имя [";"].

::

    Имя = Идентификатор.

::

    ОпределениеАртефакта = ОпределениеКонстанты
                     | ОпределениеТипа
                     | ОпределениеФункции
                     | ОпределениеИмпорта
                     | ОпределениеХранилища (?).
                     
::

    ОпределенниеКонстанты = ЦелочисленнаяКонстанта
                      | БулевскаяКонстанта
                      | Сигнал
                      | КонстантнаяФункция
                      | КонстантноеВыражение (?).
                      
::

    ОпределениеТипа = "@" (ИменованныйТип
                | Вектор
                | Рой
                | Структура
                | Обобщение
                | ОбобщеннаяСтруктура
                | ФункциональныйТип).
                
::

    ИменованныйТип = Идентификатор
               | "int"
               | "bool"
               | "signal".
               
::

    Размер = Целое | ИмяЦелочисленнойКонстанты.


::

    Вектор = ИменованныйТип"(" [Целое] ")".

::

    Рой = "[" [Целое] "]" ИменованныйТип.

::

    Структура = "(" ИменованныеПоля | НеименованныеПоля ")".

::

    ИменованныеПоля = (Идентификатор | "[" Идентификатор ["," Идентификатор] "]") "@"
                      ИменованныйТип
                 ["," (Идентификатор | "[" Идентификатор ["," Идентификатор] "]") "@"       
                      ИменованныйТип].
                
::

    НеименованныеПоля = [целое] "@" ИменованныйТип [ "," [целое] "@" ИменованныйТип].

::

    Обобщение = "{" ИменованныеПоля | НеименованныеПоля "}".

::

    ОбобщеннаяСтруктура = Структура (Обобщение | ИмяОбобщения).

::

    ИмяОбобщения = Идентификатор [ "." Идентификатор ].


$ ОписаниеТипа = typedef ( ИмяТипа | СоставнойТип | ОграниченныйТип ).

$ СоставнойТип = Вектор | Группа | Задержка | Структура | Обобщение.

$ Вектор = "(" ИмяТипа ")" [ "." Размер ]
         | vector ИмяТипа  [ "." Размер ].

$ ИмяЦелого = Идентификатор.

$ Группа =  "[" ИмяТипа "]" [ "." Размер ]
         | group ИмяТипа  [ "." Размер ].

$ Задержка = "{" ИмяТипа "}" | delay ИмяТипа.

$ Структура = struct "(" [ Поле ] { "," Поле } ")".

$ Поле = {/ ИмяПоля "<<" /} ИмяТипа
       | ИмяТипа {/ ">>" ИмяПоля /}.

$ ИмяПоля = Идентификатор.

$ Обобщение = union "(" [ Поле ] { "," Поле } ")".

$ ОграниченныйТип = Имя ИмяТипа Тело.

$ Имя = Идентификатор.

$ ОписаниеКонстанты = ИмяКонстанты "<<" ( Константа | Константное выражение ).

$ ИмяКонстанты = Идентификатор.

$ Константа = Сигнал | ["-"] Целое | | Булевская | Спецзнак.

$ ОписаниеФункции = funcdef ИмяАргумента ИмяТипа "->" ТипРезультата [ Тело ].

$ ИмяАргумента = Идентификатор.

$ ТипРезультата = ИмяТипа.

$ Тело = "{" Элемент { (";" | НоваяСтрока) Элемент } "}".

$ Элемент = Обозначение "<<" Выражение | Выражение [ ">>" Обозначение ]. 

$ Выражение = Терм { "^" Выражение | (":" | "::") Терм  }.

$ Терм = Идентификатор | Блок | Атом | Векторизация | Группировка | ЗадержкаВычислений.

$ Атом = Константа | ЭлементСтруктуры.

$ Блок = block Тело.

$ Векторизация = "(" [ СписокЭлементов ] ")".

$ СписокЭлементов = Элемент { "," Элемент }.

$ Группировка = "[" [ СписокЭлементов ] "]".

$ ЗадержкаВычислений = "{" Выражение "}".

$ ЭлементСтруктуры = ИмяСтруктуры "." ( ИмяПоля ).

$ 

$ 

$ 

$ 

$ 

$ 

$ 

$ 

$ 

