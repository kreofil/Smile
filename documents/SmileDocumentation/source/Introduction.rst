Введение
===============

Концепция архитектурно-независимого параллельного программирования (АНПП) на текущий момент не находит приверженцев. Мои прогнозы относительно путей развития методов параллельного программирования, сформулированные в конце девяностых, не оправдались. По прошествии практически уже почти тридцати лет разработка параллельных программ остается привязанной к особенностям архитектур конкретных параллельных вычислительных систем (ПВС). Меняются архитектуры как последовательных, так и параллельных компьютеров, но все также неизменным остается подход, направленный на прямое программирование для каждой из таких архитектур и не рассматривающий общую теорию параллельных программ в качестве первоосновы.

В настоящее время очень мало работ, направленных на анализ особенностей построения программ как некоторых универсальных сущностей, напрямую не связанных с реальными вычислителями. Можно отметить работы Алеевой В.Н. [Алеева-ПАВТ2019, ...)], направленных на использование Q-детерминанта. Также близкую тему затрагивают работы по созданию спецвычислителей на ПЛИС, выполняемых под руководством Левина И.И.[Levin-ПАВТ2018]. Но больше ничего конкретного назвать не могу. Поэтому остается **верить**, что то, чем в рамках научных исследований я занимаюсь, не является тупиковой ветвью и когда-нибудь (желательно как можно быстрее, пока я нахожусь в ясном уме и трезвой памяти) выстрелит.

Опираясь на эту **веру**, я продолжаю развивать концепцию архитектурно-независимого параллельного программирования на основе функционально-потоковой парадигмы, основной идеей которой является написание программ совершенно не связанных с ресурсными ограничениями реальных ПВС. В рамках этой концепции ключевым аспектом является эффективная трансформация архитектурно-независимых параллельных программ в уже существующие архитектуры, а не их непосредственное выполнение на специально создаваемых системах. На текущий момент разработан язык функционально-потокового параллельного программирования (ЯФППП) Пифагор [Легалов-2005]. Однако в его основе лежит динамическая система типов, что не обеспечитвает гибкой трансформации в реальные параллельные архитектуры. Как и для любого динамически типизированного языка в данном случае имеются много накладных расходов, ведущий к резкому уменьшению производительности вычислений. Помимо этого операторы функционально-потоковой модели параллельных вычислений (ФПМПВ) в большинстве своем ориентированы на динамическую организацию данных и хранение элементов произвольного типа, что также является ограничивающим фактором для преобразований архитектурно-независимых параллельных программ в ресурсно-зависимую форму. Поэтому для дальнейшего продолжения работ необходимо сформировать концепцию модели вычислений, которая бы обеспечила поддержку более эффективных трансформаций в архитектуры реальных ПВС для создаваемого на основе этой модели языка программирования.

Подобные концепции в настоящее время обычно опираются на статическую типизацию и организацию данных, размерность которых и внутренняя структура в основном определяются на этапе компиляции. Внедрение этих идей требует пересмотра ряда понятий лежащих в основе уже разработанных ФПМПВ и ЯФППП. Поэтому необходима разработка другой модели, ориентированной на поддержку новых идей которая бы обеспечила основу для создания соответствующего языка. Ниже рассматриваются концепции статически типизированной модели функционально-потоковых параллельных вычислений (СТМФППВ), которуют предполагается положить  в основу соответствующего статически типизированного ЯФППП (СТЯФППП) Smile. Название языка выбрано исходя из давно возникших ассоциаций, что многие из формируемых в процесс написания программ сочетаний символов образуют комбинации, напоминающие смайлики. Это определло выбор смайлика "**:-)**" в качестве символа языка.



