.. |date| date:: %d.%m.%Y
.. |time| date:: %H:%M
.. |copy| unicode:: 0xA9 .. copyright sign

.. Текущая дата |date| и время |time|

.. meta::
   :description: Описание концепций, языковых и инструментальных средств функционально-потокового параллельного программирования.
   :keywords: парадигмы программирования, функционально-потоковое параллельное программирование

:Author:    Александр Легалов
:Email:     <legalov@mail.ru>
:Date:      |date|
:Version:   0.1

:Copyright: |copy| Допускается свободное использование с обязательной ссылкой на сайт автора: "Оригинальная версия размещена на сайте www.softcraft.ru".

.. .. sectnum::
    :start: 1

.. .. contents:: Содержание
    :depth: 3


==========================================================
  Язык программирования Smile. Предварительное описание
==========================================================

Общие соображения
-----------------------------------

.. note::

    *Предполагается, что данный текст, определяющий текущую концепцию документа, носит временный характер. В дальнейшем он будет убран при формировании окончательных версий выходных документов.*

    *В рамках этого предварительного описания я хочу сформулировать свое видение языка функционально-потокового параллельного программирования Smile и инструментальных средств обеспечивающих его поддержку.*
    
    *Проектируемый язык, как и язык программирования Пифагор, базируется на функционально-потоковой модели параллельных вычислений. Также от Пифагора заимствуются особенности синтаксиса. Однако смена названия говорит о том, что в данном случае не планируется обеспечить обратную совместимость. Предполагается активно использовать статическую типизацию. Но при этом оставить (возможно) динамическую типизацию определяемую пользователем. Скорее всего, динамическую типизацию, определяемую пользователем, реализованную в Пифагоре, будет сделана попытка заменить на ограниченную статическую типизацию, когда наряду с типом накладываются алгоритмические ограничения и проверки на значения, принимаемые данным типом (динамически ограниченный статический тип?).*

    *Формируемый документ предназначен для всестороннего охвата как изменений, вносимых в первоначальную концепции языка функционально-потокового параллельного (ФПП) программирования, так и для объяснения причин, порождающих эти изменения. Поэтому  данный текст, наряду с конкретным описанием языка содержит множество дополнительных примечаний, поясняющих особенности как синтаксиса, так и семантики.*

    *Эти пояснения предполагается вносить как по ходу формирования текста документа, так и в ходе разработки компилятора языка ФПП программирования Smile.*

Введение
---------------

Статичестки типизированный язык функционально-потокового программирования Smile разрабатывается с учетом опыта, полученного при создания языка программирования Пифагор. Основным его отличием является использование статической системы типов, обеспечивающей более безопасное выполнение основных операций. Помимо этого предполагается, что должно улучшиться распределение памяти под данные, а также генерация кода в другие языки со статической типизацией, ориентированные на описание параллельных вычислений с использованием императивного или функционального программирования.

Опираясь на СТМФППВ разрабатываемый язык программирования включает дополнительные конструкции, расширяя функциональные возможности, описываемые моделью. Это обуславливается тем, что, в отличие от модели, язык программирования должен обеспечивать поддержку удобного и эффективного написания программ.

Используемый метаязык
------------------------

Для описания синтаксиса используются расширенные формы Бэкуса-Наура (**РБНФ**).
Квадратные скобки **"["** и **"]"** означают, что заключенная в них сентенциальная форма может отсутствовать, фигурные скобки **"{"** и **"}"** означают ее повторение (возможно, 0 раз), а круглые скобки **"("** и **")"** используются для ограничения альтернативных конструкций. Сочетание фигурных скобок и косой черты **"{/"** и **"/}"** используется для обозначения повторения один и более раз. Нетерминальные символы изображаются словами, выражающими их интуитивный смысл, написанными на русском языке и разделенными, при необходимости, знаком подчеркивания **"_"**. Каждое правило оканчивается точкой **"."**. Терминальные символы изображаются словами, написанными строчными буквами латинского алфавита (зарезервированные слова) или цепочками знаков, заключенными в кавычки. Левая часть правила отделяется от правой знаком **"="**.

Элементарные конструкции
--------------------------

Разделители
~~~~~~~~~~~

Пробелы, символы табуляции, перевода на новую строку и перевода страницы
используются как разделители. Вместо одного из таких символов может использоваться
любое их количество. Все другие управляющие символы употреблять в тексте программы
запрещено.

Комментарии
~~~~~~~~~~~

Многострочные комментарии начинаются парой символов "/*" и заканчиваются
парой символов "*/". Разрешены везде, где возможны разделители. Вложенность многострочных комментариев не допускается.

Примеры::

    /* Многострочный комментарий в одной строке */
    /*
     * Многострочный комментарий,
     * размещенный в нескольких строках
     */

В языке также допускаются однострочные комментарии. Они начинаются парой
символов **"//"** и заканчиваются признаком конца строки. Однострочные комментарии могут начинаться с самого начала строки или стоять после операторов, написанных в этой строке.

Пример::

    // Однострочный комментарий

**комментарий = "/*" {знак} "*/" | "//" {знак}.**

Идентификаторы
~~~~~~~~~~~~~~

Идентификаторы используются для обозначения имен констант, переменных,
функций и типов данных. Допустимые символы: цифры **0-9**, прописные и строчные буквы
латинского алфавита **A-Z**, **a-z**, символ подчеркивания **"_"**. Первый символ не является
цифрой. Идентификатор может быть произвольной длины. Прописные и строчные буквы
различаются.

**ид := (буква | "_"){буква|цифра|"_"}.**

Примеры::

    NAME1
    name1
    it_is_ID

Зарезервированные слова
~~~~~~~~~~~~~~~~~~~~~~~

Зарезервированные слова используются для ключевых слов встроенных типов данных,
предопределенных обозначений и функций. Ниже приведен общий их список::

    block       break       bool        char        const
    group       dup         delay       else        error
    false       float       func        funcdef     int
    nil         return      signal      true
    type        vector

Зарезервированные слова записываются строчными буквами.
Использовать их в качестве идентификаторов запрещено.

.. note::

    *Следует отметить, что в текущей версии языка отсутствует деление    зарезервированных слов по группам, что обычно связывается с природой их создания и использования. Это объясняется простотой языка и нацеленностью текущей реализации на сценарный вариант. Предполагается, что в последующих версиях произойдет более четкое дробление, явно увязанное с особенностями реализации и использования.*

    *В данной ситуации также стоит отметить, что типы данных должны быть вынесены в отдельную категорию предопределенных артефактов. Это  означает, что они не будут определяться через ключевые слова. То есть предополагается инициализация данных артефактов в соответствующем пространстве имен, запрещающих их повторное использовани в другом контексте. Но это будет описано позднее, когда устаканится их резервирование в данной роли.*

Обозначения
-----------

В языке, построенном на основе принципа единственного использования вычислительных ресурсов в сочетании с принципом единственного присваивания, отсутствует понятие переменной. Вместо него вводится понятие обозначения как идентификатора, поставленного в соответствие с каким-либо программным фрагментом. В пределах некоторой области видимости использование идентификатора в качестве обозначения должно быть уникальным. Обозначение получает тип и величину (значение) сопоставленного элемента и может использоваться для дальнейшей передачи этих параметров в любую точку программы, обеспечивая тем самым копирование артефакта, полученного в ходе вычислений. В языке определены два способа задания обозначений:

- префиксное, при котором знак идентификатор пишется слева от знака "<<", а определяемый артефакт справа;
- постфиксное, когда слева от знака ">>" задается определяемый артефакт, а справа его идентификатор.

**обозначение =**
    **идентификатор "<<" элемент |**
     **элемент ">>" идентификатор.**

Под элементом понимается любой из артефактов языка. Идентификатор элемента. Понятия
артефакта, выражения и блока будут даны ниже.

**элемент =**
    **артефакт | выражение | блок |**
     **обозначение | идентификатор.**

Примеры::

    X << 100;
    Pi << 3.1415;
    10 >> ten;
    (a, b):+ >> sum;
    x0 << y0 << 0;

.. note::

    *Следует отметить, что в данном языке все-таки появится присваивание, которое будет функционировать по принципу единственного присваивания. Это обусловлено тем, что при введении статической типизации появляются контейнерные артефакты заданной размерности, в которые можно вводить данные, руководствуясь этими размерами. Также возможно появление аналогов структур (записей), имеющих поля с локальным именованием. В этих случаях тоже удобнее заносить данные внутрь этих конструкций путем единственного присваивания. Это же касается обобщений. Но обозначение все равно остается и будет для таких артефактов использоваться как начальное объявление.*
    
Артефакты
-----------

К артефактам языка относятся программные объекты, определяемые в языке и несущие заданную семантическую нагрузку. Каждый артефакт характеризуется двойкой:

**<тип, значение>.**

В языке используется статическая типизация артефактов, что позволяет сформировать и идентифицировать тип любого из них во время компиляции. Значение определяет величину из множества допустимых значений, допустимых для данного типа.

.. note::

    *Наличие строкгой статической типизации не отменяет изменчивость типов. Ее реализаци планируется через процедурно-параметрический полиморфизм. Это в принципе в дальнейшем позволит осуществлять и вывод типов.*

Артефакты могут формироваться как до выполнения программы, так и во время ее выполнения. Артефакт, сформированный до вычислений, является константой заранее предопределенного типа. Существуют различные категории артефактов, которые можно описать следующим правилом:

**артефакт = атом | составной | функция.**

Типы артефактов
~~~~~~~~~~~~~~~~~~~~~~~~~~

Можно выделить неупорядоченное множество предопределенных типов, задаваемых соответствующими именами. Типы делятся на атомарные и составные. Атомарные типы и области их допустимых значений определяются аксиоматически. Составные типы являются комбинацией атомарных и уже существующих составных артефактов. Они конструируются по заданным правилам. 

.. note::

    *Нужно будет еще описать вариативность данных по типу, а также возможный их дуализм*
    
    **тип артефакт = данные | функция | дуальный.**
    
    *Также стоит отметить, что любой из артефактов оператора интерпретации может выступать как в роли данных, так и фукнции. Можно даже охарактеризовать, что если артефакт в роли данных может отображаться в другую величину (то есть, обрабатываться), то это изменяемые данные. Хотя можно такую классификацию и не проводить, так как на выходе все равно формируется другой артефакт в соответствии с принципом единственного использования. Поэтому получается, что практически любой артефакт дуальных. Дуализм может ограничиваться тем, что использование артефакта, например, в качестве функции в операторе интерпретации порождает на выходе ошибку. Тогда артефакт является только данными. А только функция тогда, когда отсутствуют функции, обеспечивающие преобразование именно этого артефакта в другой артефакт. Может быть, исходя из того, что нельзя четко разделить на данные и функции в операторе интерпретации просто не говорить об этом разделении, считая, что все артефакты дуальны!?*
    
    *Также, наверное, стоит отметить, что тип не определяет отношение артефакта к данным или функциям.*

К составным артефактам также относятся функции, выделенные в отдельную категорию в соответствии со спецификой их применения. Обозначения предопределенных типов языка, используемые в данной версии, приведены в таблице.

.. table:: **Предопределенные типы**

    ======================== ================= ============ ===================
    Название типа            Обозначение типа  Организация  Значение
    ======================== ================= ============ ===================
    **сигнал**               signal            атом         !
    **логический**           bool              атом         false или true
    **целый**                int               атом         MinInt..MaxInt
    **вектор**               vector            составной    Type(size)
    **кортеж**               tuple             составной    (Type, ...)
    **структура**            struct            составной    (Name@Type, ...)
    **обобщение**            union             составной    ....
    **рой**                  swarm             составной    Type[size]
    **задержка**             delay             составной    {e@T} => v@T
    **функция**              func              составной    @T1 -> @T2
    **ошибка**               error             атом         enum of errors
    **поток**                stream            составной    Type{}
    **типовой**              type              перечислимый Имя типа
    *действительный*         float             атом         MinFloat..MaxFloat
    *символьный*             char              атом         символ UTF-8
    ======================== ================= ============ ===================

Более детальное описание типов представлено ниже.

.. note::

    **Таблица нуждается в доработке**
    
    *В настоящее время реализован небольшой набор типов, позволяющий использовать язык для запланированных экспериментов. Расширение номенклатуры базовых типов планируется в дальнейших реализациях языка после отработки методов параллельной интерпретации и методов преобразования в параллельные программы для других архитектур.*
    
    *На текущем этапе в качестве базовых типов предполагается использовать только сигналы, логические и целые, позволяющие сформировать общую структуру всех основных операторов и операций, обеспечивающих формирование основного каркаса функционально-потоковой параллельной программы.*

Константы
-----------------------------

Константы относятся к неделимым атомарным величинам, принимающим конкретные значения, соответствующего предопределенному для них типу. Значение константы принадлежит области ее допустимых значений, задаваемой в зависимости от типа одним из следующих способов: диапазоном, диапазоном и точностью, перечислением элементов упорядоченного множества, перечислением элементов неупорядоченного множества (если нет необходимости устанавливать между элементами отношение порядка), функцией. Каждая константа - это одно значение из диапазона, определяемого областью допустимых значений. В языке реализованы следующие виды констант:

    * сигнальная константа;
    * целочисленные константы
    * булевские константы;
    * константы ошибок;
    * специальные константы.
    
Тип константы в программе определяется ее внешним видом, задаваемым синтаксическими правилами:

**константа = сигнальная | целая | логическая | спецзнак.**

.. note::

    *В Пифагоре присутствует большее число констант. Вполне возможно, что в дальнейшем их состав тоже будет расширен. Однако пока не принято решение, каким образом это расширение будет происходить. Предполагается, что в основе системы будет лежать Праязык, порождающий дочерние языки, ориентированные на различные предметные области за счет введения новых типов данных и операций над ними, что обуславливает появление и новых констант. Задачей Праязыка является обеспечение программоформирующего каркаса для всех потомков.*

    *Поэтому правило:*
    
    **константа = целая | действительная | символ |**
            **логическая | строка | диапазон | спецзнак | ...**
    
    *пока законсервировано.*
    
    *Помимо этого на данном этапе я предполаю создать версию языка, котора будет в основном поддерживать только формирование каркаса программы, описываемого моделью вычислений. То есть, речь идет о попытке выделить и создать Праязык, в котором будут присутствовать только минимально необходимые базовые функции. Далее будет интересно посмотреть, каким образом можно этот Праязык развивать в различных направлениях.*

Сигнальная константа
~~~~~~~~~~~~~~~~~~~~~

**Сигнальная константа** или просто **сигнал** имеет предопределенный тип **signal** и может принимать только одно значение **!**, указывающее на произошедшее событие, не связанное с другими типами данных. Кроме фиксации факта возникновения некоторого события сигнал больше не несет никакой дополнительной информации.

Целая константа
~~~~~~~~~~~~~~~

**Целая константа** имеет предопределенный тип **int** и используется для представления данных в формате стандартного машинного слова, длина которого зависит от архитектуры ВС. 

.. note::

    *В текущей версии языка реализовано представление целых чисел только в десятичной системе счисления. Это достаточно для проведения первоначальных экспериментов.*

**целая = [ "+" | "-" ] {/цифра/}.**

**цифра = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9".**

Примеры::

    127
    0127
    -356
    +10

Предполагается, что в соответствии с внутренним машинным представлением целочисленные константы располагаются в диапазоне **{MinInt, ..., MaxInt}**.

Например для 64-разрядной архитектуры в дополнительном коде это будет диапазон 
от -2\ :sup:`64` до 2\ :sup:`64` - 1. 

Логическая константа
~~~~~~~~~~~~~~~~~~~~

**Логическая константа** имеет предопределенный тип **bool** и может принимать значения "**true**" ("истина") или  "**false**" ("ложь"). Она задается соответствующими ключевыми словами.

**логическая = true | false.**

Для логических констант сохраняется отношение порядка:

**false < true.**

Логическая константа имеет предопределенный тип **bool**

Специальные знаки
~~~~~~~~~~~~~~~~~

**Специальные знаки** используются для задания предопределенных данных и
функций языка в зависимости от их местоположения в операторе интерпретации
интерпретации. Их смысл будет раскрыт при описании семантики оператора интерпретации. Эти константы образуют неупорядоченное множество и используются в тексте программы как
разделители других конструкций.

**спецзнак =**

    **"+" | "-" | "/" | "*" | "%" | "/%" | "<" | ">" | "=" | ">=" | "<=" | "!=" | "=>" |**
    
    **"->" | "<-" | "()" | "{}" | "[]" | "|" | "#" | "%" | ".." | "?" | "!" .**

Следует отметить, что ряд специальных знаков в настоящее время не используется и
зарезервирован для дальнейшего расширения языка.

.. note::

    *Перечисленный набор спецзнаков в дальнейшем может корректироваться. Также будет уточняться и их принадлежность к конкретному типу, что пока не описано. В целом предполагается, что большинство спецзнаков в контексте вычисления будут отображаться в функции. Вместе с тем, дуализм аргументов операции интерпретации может привести к тому, что ряд знаков будет интерпретироваться различным способом в зависимости от того, являются они данными или функциями в операторе интрепретации.*
    
    *Помимо этого, так как вводится две разновидности оператора интерпретации, для различных типов возможна разная трактовка в зависимости от этого*

Константы ошибок
~~~~~~~~~~~~~~~~

**Константы ошибок** имеют тип **error** ииспользуются для отображения некорректных ситуаций, возникающих в ходе вычислений. Величины этого типа могут обрабатываться наряду с другими данными или как исключительные ситуации.

Область допустимых значений для констант ошибки задается неупорядоченным множеством, которое в дальнейшем предполагается пополнять. В настоящий момент выделяются следующие ошибки:

- **ERROR** - неидентифицируемая ошибка;
- **REALERROR** - некорректное преобразование действительного числа;
- **INTERROR** - некорректное преобразование целого числа;
- **ZERODIVIDE** - деление на ноль;
- **INTERPRERROR** - ошибка операции интерпретации;
- **BOUNDERROR** - ошибка выхода за границы диапазона;
- **BASEFUNCERROR** – неправильное использование предопределенной функции.
- **NOERROR** - отсутствие ошибки

Эти имена запрещается использовать в программе в другом контексте.

**константа_ошибки = ERROR | REALERROR | INTERROR | ZERODIVIDE |**
    **| INTERPRERROR | BOUNDERROR | BASEFUNCERROR | NOERROR.**

Значени **NOERROR** формируется в том случае, если при получении  результата вычислений необходимо вместо конкретного значения ошибки вернуть информацию о том, что ошибка отсутствует.

.. note::

    *Предполагается, что по сравнению с Пифагором использование ошибок будет значительно переработано в сторону упрощения. Планируется, что каждая из констант ошибки будет являться отдельной функцией - обработчиком ошибки, предоставляющей информацию о типе ошибке и обеспечивающей обращение к системе для корректного завершения программы. На данном этапе не планируется введение системы обработки исключений. Хотя в дальнейшем такое развитие просматривается.*
    
    *Возможно, что реализация обработки ошибок будет сделана по аналогии с тем, как это реализовано в языке программирования GO. То есть, вместо выбрасывания исключений, будет формироваться значение, возвращаемое в качестве одного из результатов.*

Типы
---------

Язык ориентирован на использование статической системы типов. Предполагается что каждый объявляемый тип должен иметь имя. Существуют предопределенные (базовые) типы и сконструированные типы (типы, определяемые пользователями). Среди предопределенных можно выделить атомарные и составные типы. Все сконструированные типы являются составными (по определению).

**тип = атомарный_тип | составной_тип | производный_тип.**


.. note::

    *В Пифагоре значение сигнального типа обозначалось через точку ("."). В данном случае появилось желание выделить это значение более четко из основного текста, так как точка перегружена и другими контекстами, которые предполагается еще больше расширить. В частности за счет использования принципа единственного присваивания.*

Описания типов
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Описания позволяют создавать новые именованные типы, определяя их через предопределенные типы или используя уже сформированные описания типов. Имя вновь создаваемого типа задается идентификатором, который используется в качестве обозначения. Далее следует само описание, которое начинается с ключевого слова **type**.

**ОписаниеТипа = ИмяНовогоТипа "<<" type Тип**

Основная идея использования описания типов заключается в создании новых типов, которые напрямую не наследуют свойства уже созданных типов, что позволяет применять в качестве конструирования переименование типа. В отличие от алиасов (псевдонимов, определяющих дополнительные имена для того же типа) все операции исходного типа над вновь созданным напрямую недоступны. Использовать их можно только после явного приведения созданного типа к типу предшественника. В связи с этим допускается использование предопределенных атомарных типов, имеющих имя, для построения новых типов. Например::

    apple << type int

Создание новых типов на основе составных обеспечивает формирование именованных абстрактных типов данных с требуемыми полями и свойствами. Эти типы могут создаваться на основе любых составных типов и использоваться в различных манипуляциях, допускаемых над величинами, имеющими типовой тип (тип типа).

.. note::

    *В данной версии языка предполагается, что будет использоваться только (или в основном) именованая эквивалентность типов. То есть, два типа будут считаться эквивалентными, если они имеют одинаковые имена. Это, на мой взгляд, обеспечит более строгий контроль типов и позволит проводить формальную верификацию программ в более широком диапазоне. Поэтому, в большинстве случаев перед сравнением типов необходимо будет осуществлять явное преобразование к нужному типу, если такое возможно в соответствии с используемым механизмом преобразования (приведения) типов. Но без структурной эквивалентности в ряде случаев просто не обойтись. Поэтому данный вопрос требует детальной проработки...*

Предопределенные атомарные типы
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

К атомарным относятся следующие предопределенные типы:

    - сигнальный тип (**signal**);
    - булевский тип (**bool**);
    - целый тип (**int**);
    - типовой тип (**type**);
    - любой тип (**any**);
    - ошибочный тип (**error**).

**$ атомарный_тип := сигнальный | булевский | целый | функциональный | ошибочный.**

**$ сигнальный := "signal".**

**$ булевский := "bool".**

**$ целый := "int".**

**$ функциональный := "func".**

**$ типовой := "type".**

**$ любой := "any".**

**$ ошибочный := "error".**

Сигнальный тип
"""""""""""""""""""""""""""""""""""""""""""""

**Сигнальный тип** (или просто **сигнал**) обозначается ключевым словом "**signal**". Он отличается от других атомарных типов тем, что не имеет конкретного значения и в динамике определяется только фактом своего появления. Для того, чтобы показать наличие сигнала, используется константа **"!"**. То есть, можно говорить о том, что сигнальный тип определяется только одним значением. Готовность величины сигнального типа определяется самим фактом появления атома. 

Появление  сигнала качестве результата непосредственно определяет факт срабатывания соответствующего оператора интерпретации. Использование сигналов позволяет, при необходимости, моделировать в функциональных программах явное управление вычислениями. Они также могут сигнализировать о завершении работы функции, не возвращающей значимый результат.

Любая функция, не имеющая аргументов, может быть запущена только при наличии сигнала в качестве аргумента операции интерпретации. Постоянно присутствие сигнала, определяющее
«моментальный» запуск, задается следующим выражением::

    !:F

Формат величины, определяющий внутреннее строение сигнала:

**<signal, !>.**

По сути данные любого типа содержат сигнал, информирующий об их появлении. Отличие заключается в том, что все прочие типы данных имеют множество допустимых значений мощность которого больше единицы.

Булевский тип
"""""""""""""""""""""""""""""""""""""""""""""

**Булевский тип** обозначается ключевым словом "**bool**". Данные булевского типа принимают значения из множества булевских констант (**true**, **false**), мощность которого равна двум.

Формат величины, определяющий внутреннее строение булевской величины:

**<bool, {true, false}>.**

Целый тип
"""""""""""""""""""""""""""""""""""""""""""""

**Целый тип** обозначается ключевым словом "**int**". Данные целого типа принимают значения из множества целочисленных констант, мощность которого определяется реализацией целых чисел в конкретной компьютерной архитектуре.

Формат величины, определяющий внутреннее строение целочисленной величины:

**<bool, {MinInt, ..., MaxInt}>.**

Функциональный тип
"""""""""""""""""""""""""""""""""""""""""""""

**Функциональный тип** обозначается ключевым словом **func**. К этом типу относятся предопределенные функции, также называемые операциями языка и обозначаемые в основном спецсимволами. Для обозначения предопределенных функций также используются зарезервированные идентификаторы. Помимо этого к функциональному типу также относятся все функции, разрабатываемые программистом. 

С каждым функциональным типом связываются тип аргумента, обрабатываемого функцией, и тип формируемого результата.

.. note::

    *Про спецзнаки нужно еще подумать...*
    
    *Как таковое, понятие спецзнака явно нигде не фигурирует. Это просто обозначение, наряду с использованием в качестве обозначения имени. Отнесение к функциям показывает, что в качестве данных они практически не могут фигурировать. То есть, над ними отсутствует отношение порядка, нет функциональных преобразований друг относительно друга и т.д.*

Типовой тип
"""""""""""""""""""""""""""""""""""""""""""""

**Типовой тип (тип типа)** обозначается ключевым словом **type**. Данные этого типа принимают значения из множества имен предопределенных типов и типов, созданных пользователем и используемым в текущей программе. По сути это некоторый перечислимый тип, значения которого расширяются по мере порождения пользователем новых именованных типов, определяемых через описания типов.

.. note::

    *Предполагается, что на текущем этапе данный тип реализовываться не будет информация о нем оставлена, чтобы не забыть обдумать его в дальнейших исследованиях.*
    
    *Скорее всего этот тип может стать интересным, если в язык добавить вывод типов.*

Ошибочный тип
"""""""""""""""""""""""""""""""""""""""""""""

**Ошибочный тип** обозначается ключевым словом "**error**". Данные ошибочного типа принимают значения из множества констант ошибок, которое задается путем перечисления видов ошибок, возможных в ходе выполнения функционально-потоковых параллельных программ. Данное множество может изменяться в ходе разработки системы функционально-потокового параллельного программирования.

.. note::

    *Следует отметить, что на текущий момент множество атомарных типов не включает ряд типов, которые традиционно присутствуют практически во всех других языках программирования. В частности, отсутствует тип, задающий числа с плавающей точкой. Предполагается, что ядро языка не будет ориентировано на типы данных, связанные с конкретными прикладными вычислениями. Также в нем будут отсутствовать функции, ориентированные на обработку этих типов. Добавление новых типов и функций планируется рассматривать как расширение ядра языка (Праязыка, Надязыка). При этом возможны различные варианты расширений, которые будут определять семейства проблемно-ориентировнных дочерних языков (языков - потомков), предназначенных для соответствующих предметных областей и параллельных вычислителей (в основном речь идет об ориентации на различные параллельные вычислительные архитектуры).*

Составные типы
~~~~~~~~~~~~~~~~~~~

**Составные типы** строятся из атомарных типов, а также с использованием уже сформированных составных типов. Они группируют используемые типы в контейнеры или другие конструкции, обладающие определенными свойствами, что, в свою очередь, определяет семантику их использования в операторе интерпретации. К составным типам языка относятся:

    - вектор (**vector**);
    - массив (?) (**array**);
    - структура (**struct**);
    - кортеж (**tuple**);
    - обобщение (**union**);
    - любой тип (**any**);
    - рой (**swarm**);
    - поток (**stream**);
    - функция (**func**);
    - ссылка (**ref**).

.. note::

    *Использование статической типизации в целом значительно изменяет семантику языка. Затрагивает она и синтаксис. При формировании данного описания пока не делается разделение между моделью и языком. Это планируется сформировать позднее, осуществив необходимые переносы текста.*

Тип Вектор
"""""""""""""""""""""""""""""""""""""""""""""

Тип **Вектор** (векторный тип) обозначается ключевым словом **vector**. Он обеспечивает группировку данных одного типа в вектор, готовность которого к выполнению определяется при поступлении всех его элементов. Возможно формирование статических и динамических векторов. Длина статически определяемого вектора задается константным выражением, значение которого должно быть положительной целочисленной величиной вычисляемой во время компиляции. Длина динамически порождаемого вектора вычисляется во время выполнения программы, но до начала его использования. Ее значение тоже должно являться положительным числом.

Элементы вектора задаются в виде списка значений, заключенных в круглые скобки:

    (элемент\ :sub:`1`, элемент\ :sub:`2`, ... элемент\ :sub:`N`)

Нумерация элементов, размещенных внутри вектора, начинается с единицы. Число N в данном случае определят длину вектора. Описание векторного типа задает для типа имя, определяемое пользователем. Это описание всегда требует указание длины вектора целочисленным константным выражением и задается с использованием следующего синтаксиса:

**$ вектор := имя_типа "(" длина ")".**

**$ длина := ЦелочисленноеКонстантноеВыражение.**

Примеры описания векторных типов::

    A << type int(100)      // Целочисленный вектор типа А
    B << type bool(30)      // Булевский вектор типа А

Ключевое слово **vector** используется при проверке типа, а также в качестве имени функции при выполнении оператора интерпретации.

.. note::

    *Следует отметить, что одной из идей является использование многомерных массивов, задаваемых с использованием ключевого слова* **array**. *Это расширяет параллелизм на многомерные конструкции. Возможное их описание может быть представлено следующим синтаксисом:*
    
    **Массив ::= ИмяТипа "(" Размерность ")"**

    **Размерность ::= ЦелочисленноеКонстантноеВыражение**
                        **{ "," ЦелочисленноеКонстантноеВыражение }**

    *Примеры массивов*::
    
        AA << type int(100, 100)
        BB << type bool(30, 40)
    
    Однако пока мне непонятно, каким образом лучше реализовать массивы. Прямое решение не выглядит достаточно эффективным из-за проблем с использованием многоразмерных индексных выражений. В дальнейшем, как вариант, предполагается рассмотреть реализацию массивов в виде расширения векторов. То есть в виде некторой оболочки, которая добавляет индексы к вектору. Тогда для выбора любого элемента массива планируется преобразование его индексов к индексу вектора путем специальной операции **index**. Например: `A:index^(i,j,k)`. Этот вариант видится мне более предпочтительным. Не смотря на то, что вектор уже не будет частным случаем массива, данный вариант позволяет рассматривать приведение массива к вектору и вектора к массиву...
    
    На данном этапе реализацию многомерных массивов реализовывать не планируется.

Тип Структура
"""""""""""""""""""""""""""""""""""""""""""""

Тип **Структура** (структурный тип) обеспечивает группировку разнотипных данных по аналогии со структурными типами различных языков программирования. Структура состоит из полей, каждое из которых имеет имя и тип. Описание структуры имеет следующий синтаксис:

**Структура = "(" ПолеСтруктуры { "," ПолеСтруктуры } ")"**

**ПолеСтруктуры = ИмяПоля "@" ИмяТипа**
        **| "[" ИмяПоля { "," ИмяПоля } "]" "@" ИмяТипа**

Примеры структурных типов::

    Triangle << type (a@int, b @ int, c @int)
    Rectangle << type ([x,y]@int)

Для обозначения типа в языке используется ключевое слово **struct**. 

Тип Кортеж
"""""""""""""""""""""""""""""""""""""""""""""

Тип **Кортеж**, как и структура, предназначен для группирования неоднородных данных. Он отличается от структуры отсутствием именованных полей. По сути он похож на вектор, но может содержать разнотипные элементы. Обращение к элементам кортежа осуществляется по номеру поля (поля, как и в векторе, нумеруются, начиная с единицы). Для задания кортежей используется следующий синтаксис:

    **Кортеж = "(" ИмяТипа { "," ИмяТипа } ")"**
    
Примеры задания типов кортежей::

    С << type (int)
    В << type (int, bool, signal)

Для обозначения типа в языке используется ключевое слово **tuple**. Возможно явное и в ряде ситуаций неявное преобразование структур в кортеж, что обуславливается эквивалентностью представления типов данных внутри структур и кортежей. Помимо этого возможно явное приведение к типу кортеж векторов. Обратное приведение допустимо, если все элементы кортежа  имеют один тип.

.. note::

    *По всей видимости допустимо преобразование вектора в кортеж, а также кортежа в вектор при условии, что все элементы кортежа имеют один тип. Также стоит обдумать допустимость преобразования в кортеж структуры с идентичными полями, а также соответствующее преобразование кортежа в структуру. Это должно осуществляться во время компиляции, что соответствует статической типизации. По всей видимости, многие такие преобразования стоит допустить по умолчанию в связи с их очевидностью. Данный тип преобразований соответствует структурной эквивалентности типов (в отличии от именованной эквивалентности)*
    
Тип Обобщение
"""""""""""""""""""""""""""""""""""""""""""""

Тип **Обобщение** (обобщающий тип) во многом аналогичен по организации и использованию обобщениям, используемым в других языках. Основной его задачей является объединение воедино взаимоисключающих артефактов. Существуют различные подходы к организации обобщений, включая методы, поддерживающие полиморфизм. В языке предполагается использование процедурно-параметрических обобщений, обеспечивающих более гибкую поддержку эволюционного расширения программ по сравнению с другими подходами. Правила, определяющие синтаксис обобщений имеют следующий вид:

**Обобщение = "{" ПолеОбобщения { "," ПолеОбобщения } "}"**

**ПолеОбобщения = ИмяТипа { "," ИмяТипа }**
                **| ИмяПризнака "@" ИмяТипа**
                **| "[" ИмяПризнака { "," ИмяПризнака } "]" "@" ИмяТипа**

Примеры описания обобщений::

    Figure1 << type {Triangle, Rectangle}
    Figure2 << type {trian@Triangle, 
                    rect@Rectangle, 
                    rhomb@Rectangle}
    WeekDay << type{[Sun,Mon,Tue,Wen,Thu,Fri,Sat]@signal}

Для обозначения типа в языке используется ключевое слово **union**. 

.. note::

    *Пока вопрос с обобщением и их использованием рассматривается на уровне мономорфизма. То есть, предполагается явный анализ признаков обобщения, аналогичный тому, как это делается с объединениями в Си и вариантными записями в Паскале. Применение процедурно-параметрического полиморфизма или других вариантов планируется только в следующих версиях.*

Любой тип
"""""""""""""""""""""""""""""""""""""""""""""

**Любой тип** обозначается ключевым словом **any**. Данные этого типа по сути являются вариантным обобщением для всех типов создаваемой программы от предопределенных до производных. По сути любой тип это двойка **<тип, значение>**, в которой хранимое значение определяется именем типа. Допускает приведение произвольных значений к данному типу с последующим возможным анализом имени типа полученного значения и соответствующим его выделением для выполнения необходимых операций.

.. note::

    *С другой стороны этот тип может рассматриваться как процедурно-параметрическое обобщение общего вида, формируемое автоматически сборкой имен типов в качестве признаков. То есть, можно будет создавать обработчики обобщений с использованием в качестве обобщающих аргументов тип* **any**.
    
    *Пока я обозначил этот тип. Более конкретный его анализ, включая полноту операций, планируется провести позднее. Также пока непонятно, стоит ли вообще вводить этот тип. Возможно, что он может оказаться полезным, когда будет рассматриваться добавление вывода типов.*

Тип Рой
"""""""""""""""""""""""""""""""""""""""""""""

Тип **Рой** (роевой тип) используется для описание независимых данных, над которыми возможно выполнение массовых параллельных операций. Обозначается ключевым словом **swarm**. Все элементы роя имеют один тип, а функция, осуществляющая их обработку, может одновременно выполняться над каждым элементом. Результатом является также рой, размерность которого равна размерности роя аргументов. Синтаксические правила, определяющие данный тип, имеют следующий вид:

**Рой = ИмяТипа "[" Целое "]"**

Пример описания типа::

    R << type int[100]

Рой обеспечивает группировку данных одного типа в вектор, готовность которого к выполнению определяется при поступлении любого его элементов. В отличие от вектора функция, определяемая в операторе интерпретации, выполняется над каждым элементом роя, что обеспечивает неявное задание массового параллелизма. Запуск функции осуществляется асинхронно при появлении в группе очердного элемента. Полученный в ходе выполнения функции результат также асинхронно поступает дальше, если функция имеет возвращаемый тип, который является роем.

Возможно формирование роев фиксированной и переменной размерности, каждый из которых обладает своими свойствами и может обрабатываться своим множеством функций. Множества функций для обработки разных видов роев пересекаются, но не перекрываются. Элементы роя задаются в виде списка значений, заключенных в квадратные скобки::

    [элемент\ :sub:`1`, элемент\ :sub:`2`, ... элемент\ :sub:`N`]

Нумерация элементов, размещенных внутри роя, начинается с единицы. Число N в данном случае определят размер роя. Размер роя может быть задан константным выражением при описании его типа в том случае, если объявляется рой с фиксированной размерностью.

.. note::

    *Как и для вектора пока предлагается только одномерное решение. Хотя есть соблазн разобраться и с реализацией многомерных роев. Но пока данный вопрос остается нерешенным.*
    
    *Следует также отметить, что существует соблазн изменить правила использования роя в сторону упрощения по сравнению с параллельными списками Пифагора. В частности просматривается самый простой вариант, когда использование роя допускается только на самом верхнем уровне вложенности. Или, как более сложный вариант, не допускается непосредственное вложение роев друг в друга, а также функции, которые ведут к организации такого вложение.*
    
    Пример последнего: ``([...],[...]):[]``. Пока предпочтительным смотрится более простой вариант.

Тип Поток
"""""""""""""""""""""""""""""""""""""""""""""

Тип **Поток** является альтернативой асинхронному списку языка программирования Пифагор. Он используется для обработки данных поступающих последовательно и асинхронно в произвольные промежутки времени. Размерность поступающих данных при этом неизвестна, поэтому завершение обработки возможно только по признаку конца потока. Поток готов к обработке при наличии в нем хотя бы одного элемента. Тип всех элементов потока одинаков. Синтаксические правила, определяющие поток:

**Поток = ИмяТипа «{» «}»**

Пример описания потокового типа::

    A << type int{}

Тип Функция
"""""""""""""""""""""""""""""""""""""""""""""

Тип **Функция** (или **функциональный тип**) позволяет задать сигнатуру функции, определяя имя типа, тип аргумента, а также тип результата. В целом определение функционального типа отличается от общепринятых в других языках программирования только тем, что любая функция имеет только один аргумент и возвращает только один результат. Синтаксические правила, определяющие описание функционального типа:

**ФункциональныйТип = func Аргумент «->» Результат**

**Аргумент = ИмяТипа | КортежТипов**

**Результат = ИмяТипа | КортежТипов**

**КортежТипов = «(» ИмяТипа «,» { ИмяТипа } «)»**

Примеры описаний::

    F << type func int -> int
    F2 << type func (bool, int, int) -> (int, bool)

.. note::

    *Возможны в перспективе варианты, когда функция возвращает вектор, массив, рой или поток. Но пока так глубоко копать не буду...*
    
    *Интерес также представляет задание структуры в качестве типа. Но в данной ситуации предполагается, что использование кортежа обеспечивает структурную эквивалентность и позволяет в дальнейшем подставлять любые структурно эквивалентные типы...*

Тип Ссылка
"""""""""""""""""""""""""""""""""""""""""""""

Тип **Ссылка** (или ссылочный тип) обеспечивает поддержку указателей на различные хранилища определенного типа, что позволяет передавать значения между функциями без их копирования. Основное назначение заключается в дополнительном контроле типов в ходе передач. Синтаксические правила, определяющие описание ссылочного типа:

**Ссылка = ИменованнаяСсылка | СсылкаНаВектор | СсылкаНаРой | СсылкаНаПоток.**

**ИменованнаяСсылка = "&" ИмяТипа.** 

Данная ссылка обеспечивает обеспечивает доступ к данным, имеющим соответствующий именованный тип. В зависимости от того, каким образом сформированы эти данные, через ссылку может осуществляться как их чтение, так и запись. В последнем случае должен соблюдаться принцип единственного присваивания, если установлена неизменяемость данных.

При взаимодействии с контейнерными данным зачастую вместо именованных типов удобнее использовать данные, имеющие отличающуюся размерность, это затрагивает векторы, массивы, рои. Для описания в этих случаях предлагаются ссылки, в которых размерность не устанавливается:

**СсылкаНаВектор = "&" ИмяТипа "(" ")".**

**СсылкаНаРой = "&" ИмяТипа "[" "]".**

**СсылкаНаПоток = "&" ИмяТипа "{" "}".**

.. note::

    Тоже пока вызывает много вопросов. Требует проработки...
    
    В частности следует отметить, что со ссылками можно связать дополнительный артефакт, обеспечивающий независимое сопровождение при обработке ряда составных типов. Например, потоков и роев. В этом случае формируются дополнительные конструкции, обеспечивающие для каждой из ссылок независимый обход данных. Поэтому нужно думать...
    
    В перспективе возможно добавление ссылки на массив:
    
    **СсылкаНаМассив = "&" ИмяТипа "(" РазмерностьМассива ")".** (???)

Преобразование (приведение) величин разных типов
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Преобразование типов обеспечивает определенную гибкость в манипуляции абстракциями. Можно выделить статическое и динамическое преобразование типов. При статическом пробразовании типов этим процессом занимается компилятор. То есть, все возможные ошибки определяются на этапе компиляции. Динамическое приведение типов осуществляется во время выполнения программы и связано в основном с преобразованиями обобщений посредством функций преобразования типов, которые вводятся в язык для повышения гибкости. Описание этих функций будет сделано при рассмотрении оператора интерпретации. Следует также отметить, что преобразования осуществляются не с самими типами а над величинами, имеющими некоторый тип, которые преобразуются к величинам другого типа.

Статические преобразования типов во время компиляции
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

Возможны следующие статические преобразования типов величин:

#. Тип любой величины может быть преобразован к сигнальному типу. При этом значение исходной величины теряется. По сути сигнальный тип является обобщением всех других типов, так как он несет только информацию (сигнал) о готовности данных. Следует также отметить, что получение любого другого типа из сигнального невозможно.

#. Именованный тип любой величины может быть преобразован к типу **any**. В этом случае формируется структура, определяющая любой тип, которая хранит имя преобразуемого типа, а также сохраняет его значения. Дальнейшие манипуляции с полученной величиной, включая преобразование ее типа, при отсутствии системы вывода типов, могут проводиться только во выполнения программы.

#. Именованный тип, сформированный определением типа в описании **type** на основе другого именованного типа, может быть явно преобразован к своему родительскому типу на этапе компиляции. При этом значение программного артефакта не меняется. Данное приведение позволяет выполнять над имеющимся значением все операции над родительским типом. Следует отметить, что в принципе возможно реализовать и неявное преобразование. Но в этом случае формируемый новый тип ничем не будет отличаться от родительского. Поэтому такая трактовка нового типа вряд ли имеет смысл. Лучше ввести ограничения на функции с ним и в дальнейшем ввести свое допустимое множество функций.

#. Именованный родительский тип, используемый при определении нового типа в описании **type**, может быть явно преобразован к этому новому типу на этапе компиляции. При этом значение существующей величины не изменяется. Над преобразованной величиной возможны только функции, определенные над этим новым типом. Здесь ситуация обратная предыдущему случаю. То есть, наличию сформированного инкапсулированного набора можно использовать только после явных приведений типа.

#. Формируемые в программе величины, имеющие структурный тип, могут быть неявно преобразованы к кортежам на этапе компиляции. Это преобразование полезно при использовании различных структур в качестве аргументов функций без дополнительный явных приведений.

.. note::

    *Имеющаяся во многих языка система вывода типов во время компиляции в перспективе может появиться в данном языке для восстановления конкретного типа из обобщенного типа any в ряде ситуаций не связанных с динамическим полиморфизмом. Поэтому в некоторых случаях в будущем вполне возможно восстановление типа артефакта из обобщенного типа any во время компиляции. Это же восстановление в принципе возможно в будущем реализовать и для обобщений.*
    
    *Неявные преобразования структур, векторов и т.д. к кортежам и обратно нужно обдумать...*

Представленные преобразования могут осуществляться как явно, так и неявно. Явные преобразования предполагают непосредственное использование функций приведения типов, обеспечивающих получение соответствующих новых типов. Например::

    6: apple                      @int     ⇒ @apple
    (3,4):intPair                 @int(2)  ⇒ @intPair
    (1,2,3,4,5):signal            @int(5)  ⇒ @signal
    
Неявные преобразования связаны с использованием формируемых в программе величин в качестве аргументов функций, тип которых задается при их определении. Так как тип компилятору заранее известен, то в этом случае его преобразование будет однозначным. Например::

    :+ << func x@intPair->@int {...}
    (3,4):+     ⇒ (3,4):intPair:+

.. note::

    *Обозначение ":+" задает перегрузку знака "+" в качестве функции.*

Последнее преобразование возможно только в том случае, если имеется однозначное определение функции. Возможно ситуация, когда имя функции перегружено, а ее уникальность определяется сигнатурой. В этой ситуации возможны функции с разной сигнатурой, аргументы которых имеют типы, созданные от одного родителя. Тогда невозможно определить, какую из функций подставить. В этой ситуации требуется явное приведение типа. Например::

    apple << typedef int;
    pear  << typedef int;
    f1 << func x@apple->@signal {...}
    f1 << func xpear->@signal {...}
    5:pear:f1       -- явное приведение для выбора нужной функции
    
Преобразование между атомарными константами
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

Зачастую при использовании констант удобнее использовать неявные преобразования для восприятия написанного кода. В частности во многих языках программирования целочисленный ноль (0) в зависимости от контекста может восприниматься как действительное число (0.0).
Аналогичные неявные преобразования значений констант предполагается использовать и в разрабатываемом языке в тех случаях, когда контекст константы очевиден. В частности на данный момент просматриваются следующие неявные преобразования:

Для булевских величин вместо **true** и **false** допускается неявно использовать целочисленные константы **0** и **1** соответственно. Эту возможность предполагается использовать для разработки функций, реализующих булевские функции, которые впоследствии планируется транслировать в топологию ПЛИС. Удобнее в этом случае манипулировать числами, отображающими булевские значения. Преобразование осуществляется на этапе компиляции.

Данные (величины)
-------------------------------------------

Данные формируются в ходе вычислений. Они отображаются на память компьютера. Если в языке Пифагор для их представления достаточно было использовать результаты выполнения функций, увязанные с обозначениями, то применение статической типизации наряду с этим подходом позволяет, используя принцип единственного присваивания, создавать незаполненные хранилища требуемого типа, которые в ходе вычислений могут наполняться. Это, с одной стороны, усложняет семантику языка, но с другой позволяет повысить эффективность разрабатываемого кода за счет прямого доступа к заранее сформированным контейнерам вместо их сборки во время выполнения программы. При этом ранне используемый подход с обозначением результатов вычислений остается, что позволяет писать программы в чисто функциональном стиле.

Использование типов при этом обеспечивает описание хранилищ данных:

**Хранилище = ИмяХранилища "@" ( ИмяТипа | СоставнойТип | Ссылка ).**

.. note::

    Следует уточнить и описать подробнее.

Примеры::

    x@int
    y@intPair
    point@(int, int)
    intRef@&int
    vectorRef @&bool()
    rectangle@([a,b]@int)

Операторы
--------------

Операторы языка определяются в соответствии со статически типизированной функционально-потоковой моделью параллельных вычислений. Они обеспечивают формирование каркаса функции. Выделяются операторы группировки и операторы интерпретации.

**Операторы группировки** обеспечивают формирование значений составных типов. К ним относятся:

    * оператор, обеспечивающий создание кортежей (**tuple**);
    * оператор формирования роя (**swarm**);
    * оператор задержки (**delay**).

.. note::

    Наряду с этими основными операторами нужно обратить внимание, что статическая типизация позволяет создавать составные типы с фиксированной структурой, доступ к элементам которых может обеспечиваться записью в отдельные поля с соблюдением принципа единственного присваивания.
    
    Необходимо не забыть и описать соответствующие группы операторов для выше определенных типов данных с фиксированной структурой. Это описание необходимо добавить в раздел, посвященный описанию семантики.
    
**Оператор интрепретации** обеспечиваеь формирование функциональных преобразований. Один из его входных параметров является функцией, а другой определяет аргумент, обрабатываемый этой функцией. Используются префиксная и постфиксаная формы оператора интрепретации. В префиксной форме оператор обозначается знаком **^**. В этом случае функция **F(x)** будет записана ка **F^x**. Оператор интрепретации в постфиксной форме задется двоеточием (**:**), что позволяет записать приведенную функцию в виде **x:F**.

Данный оператор по сути обеспечивает поддержку семантики всех функциональных преобразований, которая представлена в следующем разделе.

Функция
-------------------

**Функция** – составной артефакт, конструируемый специальным образом. Она задается
определением, начинающимся с ключевого слова **func**. Функция состоит из заголовка и тела. 
В заголовке указывается идентификатор аргумента, обеспечивающего передачу в тело
функции необходимых данных и его тип, а также тип результата, возвращаемого из функции. 
В теле описывается алгоритм обработки аргумента с применением соответствующих элементов языка. Доступ к исходным данным осуществляется только через аргумент. Тело функции состоит из элементов,
заключенных в фигурные скобки и разделяемых между собой символом **";"**.

В ходе выполнения функции обычно формируется результат, который возвращается
после применения к нем функции возврата, обозначаемой зарезервированным идентификатором **return**:

``результат:return`` или ``return^результат``

Помимо этого ключевое слово **return** может использоваться в качестве альтернативного варианта точки возрата, когда оно задает не функцию, а обозначение возвращаемого значения:

``результат >> return`` или ``return << результат``

Этот вариант предназначен для случаев, когда из функции необходимо возвратить задержку.

.. note::

    *Наличие подобного свойства еще нужно обдумать... Пока же о реализации говорить рано.*

Возвращаемый результат может быть любым допустимым значением, полученным в
ходе вычислений. Возврат результата может осуществляться до завершения выполнения всех
операций в теле функции, которая продолжает существования до завершения всех
внутренних операций. В этом случае в теле функции будет наблюдаться побочный эффект, который может быть связан либо с какими-то дополнительными фоновыми действиями, либо с ошибкой в ее реализации. Однако повторного возврата, в соответствии с принципом единственного присваивания, произойти не может.
Избавление от побочных эффектов, если они являются лишними, осуществляется путем анализа и оптимизации тела функции соостветствующими методами анализа.

Если в качестве результата задается рой, то возможен асинхронный (не одновременный) возврат его независимых элементов. Также в качестве возвращаемого значения может выступать сигнал.

**Функция = "func" [ Аргумент ]**

        **["->" ТипРезультата] [ТелоФункции].**

**Аргумент = ИмяАргумента "@" ИмяТипа**

        **| ИмяАргумента "@" "(" ИмяТипа { "," ИмяТипа } ")"**

        **| "(" ИмяПоля "@" ИмяТипа { "," ИмяПоля "@" ИмяТипа } ")"**

**ТелоФункции = [ "{" [ Элемент {";" Элемент }] "}" ]**

.. note::

    *Пока не проработаны и не включены варианты, связанные с использованием в качестве прямого аргумента потоков и других артефактов. Но скорее всего из добавление пойдет как именованных типов*

При отсутствии в определении функции аргумента предполагается, что он имеет сигнальный тип, использование которого в теле фунции не имеет смысла. Однако такой аргумент всегда присутствуе при вызове функции, определяя момент ее запуска. В этом случае сигнал может задаваться константой, указывая на немедленный запуск функции. Или же он может являться вычисляемым значением, что позволяет отложить запуск функции без параметров на некоторое время.

Тип возвращаемого значения также может не указываться. В этом случае предполагается что функция возращает сигнал. Также возврат сигнального значения может быть задан явно.

Отсутствие у функции тела интерпретируется как ее **предварительное объявление**. Оно
полезно, когда функция еще окончательно не реализована, но знание ее сигнатуры необходимо в других функциях, например, при наличии рекурсивных вызовов. Следует отметить, что окончательное определение функции, включающее ее тело должно быть сформировано до момента сборки программы.

Под программой понимается функция, которая связана с совокупность полностью определенных и взаимосвязанных функций, обеспечивающих решение поставленной задачи.

Перегрузка имен функций
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

В языке поддерживается статический полиморфизм, реализуемый за счет перегрузки имен функций. Это предполагает идентификацию функций по уникальности сигнатуры, состоящей из имени функции и типа аргумента.

Определение спецзнаков в качестве имен функций
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Специальные знаки могут использоваться в качестве имен функций за счет их специального обозначения, имеющего следующий формат:

**СпециальноеИмя = ":" Спецзнак**

Допускается также перегрузка функций, обозначенных специальными именами.

.. note::

    *То есть в языке предполагается допускать пользовательскую перегрузку спецсимволов, не противоречащую их начальному определению на уровне языка. Использование двоеточия в качестве префикса возможно, так как оператор интерпретации перегружать запрещено по определению.*
    
    *Данную возможность предполагается ввести позднее.*

Базовые (предопределенные) функции
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Базовые функции задаются их именами, являющимися зарезервированными словами и спецсимволами. Большинство этих функций могут выполняться во время компиляции константных выражений. Данные функции определяют основные операции, обеспечивающие, наряду с программо-формирующими операторами формирование структуры программы и выполнение предопределенных вычислений.

Блок
-----

**Блок** - это объединение элементов внутри тела функции, служит для логического соединения группы операторов выполняющих законченное действие, а также для локализации обозначений. Он начинается с ключевого слова **block**, за которым следует тело блока, аналогичное телу функции. Отличие тела блока заключается в том, что выход из него осуществляется по обозначению результата зарезервированным идентификатором **break**, с которым связывается значение, возвращаемое из блока. Данное ключевое слова (как и **return**) может выступать в качестве функции или обозначения.

Использование **break** в качестве функции:

``результат:break`` или ``break^результат`` 

Использование **break** в качестве обозначения:

``результат >> break`` или ``break << результат``

Тип значения, возвращаемого из блока, должен быть известен компилятору и определяется из анализа элементов, входящих в блок или явно задается программистом.

**$ Блок = "block" "{" [ Элемент {";" Элемент }] "}".**

Выражение
-----------

**Выражение** - это терм или цепочка термов, связанных между собой операторами интерпретации. Под термом понимается артефакт, блок или имя ранее обозначенного элемента. Наличие операции интерпретации позволяет трактовать два ее операнда как функцию и аргумент. Существуют префиксная и постфиксная формы записи оператора интерпретации, отличающиеся друг от друга только порядком следования аргумента и функции. Префиксный оператор интерпретации задается стрелкой вверх **"^"**,
слева от которой стоит терм, выступающий в роли функции, а справа - аргумент::

    F^X 

При постфиксной записи это же выражение будет выглядеть следующим образом::

    X:F

В том случае, если оператор интерпретации возвращает ошибку, выполнение текущей функции прекращается. Ошибка порождает соответствующие системные сообщения и инициирует прерывание выполнения программы.

**$ выражение = терм {( "^" выражение | ":" терм )}.**

**$ терм = артефакт | блок | идентификатор.**

Приведенный синтаксис выражения показывает, что префиксный оператор интерпретации выполняется справа налево, а постфиксный слева направо. Изменение приоритетов можно осуществить использованием блоков, а также фигурных, квадратных или круглых скобок, являющихся операторами группировки в составные конструкции, и, следовательно, формирователями новых промежуточных артефактов.

Структура программы
--------------------

Программа состоит из множества программных артефактов, взаимосвязанных между собой по контексту, наполнение которого определяется стартовой функцией. Эта функция запускается в начале выполнения программы и содержит вызовы других функций, использует различные типы данных и константы. Исходя из этого совокупность всех артефактов, доступных из стартовой функции и определяет общую структуру программы.

Следует отметить, что все артефакты являются независимыми программными объектами. Они описываются и формируются независимо друг от друга и хранятся в виде отдельных сущностей в общей таблице исходных текстов артефактов. При компиляции для каждого из артефактов формируется его промежуточное представление, которое заносится в общую таблицу этих представлений, называемой таблицей реверсивных информационных графов (РИГ). Также в ходе компиляции создается описание артефакта, определяющее его интерфейс, необходимый для взаимодействия с другими артефактами. Это описание добавляется в таблицу экспорта общей базы данных артефактов, образующей пакет (репозиторий) артефактов.

Разработка программного обеспечения заключается в создании одного или нескольких пакетов, образующих приложение и (или) библиотеки функций. Пакеты могут размещаться на различных системах, включая удаленные. Доступ к внешним пакетам осуществляется через директивы импорта.

.. note::

    *Пока удовлетворюсь этим описанием, которого явно мало.*

Программа содержит множество описаний, каждое из которых обозначено некоторым именем.

**$ обозначенное_описание = {/ идентификатор "<<" /}**
       **описание {">>"идентификатор}**
        **| [описание">>"] идентификатор {/ ">>" идентификатор /}.**

**$ описание = функция | const константное_выражение | описание_типа.**

**Константное выражение** - это любой артефакт языка, вычисляемый на этапе
компиляции, и используемый в последующих выражениях как атомарная константа, вектор или группа, атомами которых на самом нижнем уровне вложенности являются константы.

Пример::

    pi << const 3.14

