.. |date| date:: %d.%m.%Y
.. |time| date:: %H:%M
.. |copy| unicode:: 0xA9 .. copyright sign

.. Текущая дата |date| и время |time|

.. meta::
   :description: Описание концепций, языковых и инструментальных средств функционально-потокового параллельного программирования.
   :keywords: парадигмы программирования, функционально-потоковое параллельное программирование

:Author:    Александр Легалов
:Email:     <legalov@mail.ru>
:Date:      |date|
:Version:   0.1

:Copyright: |copy| Допускается свободное использование с обязательной ссылкой на сайт автора: "Оригинальная версия размещена на сайте www.softcraft.ru".

.. .. sectnum::
    :start: 1

.. .. contents:: Содержание
    :depth: 3


==========================================================
  Язык программирования Smile. Предварительное описание
==========================================================

Общие соображения
-----------------------------------

.. note::

    *Предполагается, что данный текст, определяющий текущую концепцию документа, носит временный характер. В дальнейшем он будет убран при формировании окончательных версий выходных документов.*

    В рамках этого предварительного описания я хочу сформулировать свое видение языка функционально-потокового параллельного программирования Smile и инструментальных средств обеспечивающих его поддержку.
    
    Проектируемый язык, как и язык программирования Пифагор, базируется на функционально-потоковой модели параллельных вычислений. Также от Пифагора заимствуются особенности синтаксиса. Однако смена названия говорит о том, что в данном случае не планируется обеспечить обратную совместимость. Предполагается активно использовать статическую типизацию. Но при этом оставить (возможно) динамическую типизацию определяемую пользователем. Скорее всего, динамическую типизацию, определяемую пользователем, реализованную в Пифагоре, будет сделана попытка заменить на ограниченную статическую типизацию, когда наряду с типом накладываются алгоритмические ограничения и проверки на значения, принимаемые данным типом (*динамически ограниченный статический тип?*).

    Формируемый документ предназначен для всестороннего охвата как изменений, вносимых в первоначальную концепции языка функционально-потокового параллельного (ФПП) программирования, так и для объяснения причин, порождающих эти изменения. Поэтому  данный текст, наряду с конкретным описанием языка содержит множество дополнительных примечаний, поясняющих особенности как синтаксиса, так и семантики.

    Эти пояснения предполагается вносить как по ходу формирования текста документа, так и в ходе разработки компилятора языка ФПП программирования Smile.

Введение
---------------

Язык функционально-потокового программирования Smile разрабатывается с учетом опыта, полученного при создания языка программирования Пифагор. Основным его отличием является использование статической системы типов, обеспечивающей более безопасное выполнение основных операций. Помимо этого предполагается, что должно улучшиться распределение памяти под данные, а также генерация кода в другие языки, ориентированные на описание параллельных вычислений с использованием традиционного императивного программирования.

Используемый метаязык
---------------------

Для описания синтаксиса используются расширенные формы Бэкуса-Наура (**РБНФ**).
Квадратные скобки **"["** и **"]"** означают, что заключенная в них сентенциальная форма
может отсутствовать, фигурные скобки **"{"** и **"}"** означают ее повторение (возможно, 0 раз),
а круглые скобки **"("** и **")"** используются для ограничения альтернативных конструкций.
Сочетание фигурных скобок и косой черты **"{/"** и **"/}"** используется для обозначения
повторения один и более раз. Нетерминальные символы изображаются словами,
выражающими их интуитивный смысл, написанными на русском языке и разделенными,
при необходимости, знаком подчеркивания **"_"**. Каждое правило оканчивается точкой **"."**.
Терминальные символы изображаются словами, написанными строчными буквами
латинского алфавита (зарезервированные слова) или цепочками знаков, заключенными в
кавычки. Синтаксическим правилам предшествует знак **"$"** в начале строки. Левая часть
правила отделяется от правой знаком **":="**.

Элементарные конструкции
--------------------------

Разделители
~~~~~~~~~~~

Пробелы, символы табуляции, перевода на новую строку и перевода страницы
используются как разделители. Вместо одного из таких символов может использоваться
любое их количество. Все другие управляющие символы употреблять в тексте программы
запрещено.

Комментарии
~~~~~~~~~~~

Многострочные комментарии начинаются парой символов "/*" и заканчиваются
парой символов "*/". Разрешены везде, где возможны разделители. Вложенность
многострочных комментариев не допускается.

Примеры::

    /* Многострочный комментарий в одной строке */
    /*
     * Многострочный комментарий,
     * размещенный в нескольких строках
     */

В языке также допускаются однострочные комментарии. Они начинаются парой
символов **"//"** и заканчиваются признаком конца строки. Однострочные комментарии могут начинаться с самого начала строки или стоять после операторов, написанных в этой строке.

Пример::

    // Однострочный комментарий

**$ комментарий := "/*" {знак} "*/" | "//" {знак}.**

Идентификаторы
~~~~~~~~~~~~~~

Идентификаторы используются для обозначения имен констант, переменных,
функций и типов данных. Допустимые символы: цифры **0-9**, прописные и строчные буквы
латинского алфавита **A-Z**, **a-z**, символ подчеркивания **"_"**. Первый символ не является
цифрой. Идентификатор может быть произвольной длины. Прописные и строчные буквы
различаются.

**$ ид := (буква | "_"){буква|цифра|"_"}.**

Примеры::

    NAME1
    name1
    it_is_ID

Зарезервированные слова
~~~~~~~~~~~~~~~~~~~~~~~

Зарезервированные слова используются для ключевых слов встроенных типов данных,
предопределенных обозначений и функций. Ниже приведен общий их список::

    block       break       bool        char        const
    group       dup         delay       else        error
    false       float       func        funcdef     int
    nil         return      signal      true
    type        typedef     vector

Зарезервированные слова записываются строчными буквами.
Использовать их в качестве идентификаторов запрещено.

.. note::

    *Следует отметить, что в текущей версии языка отсутствует деление
    зарезервированных слов по группам, что обычно связывается с природой их создания и
    использования. Это объясняется простотой языка и нацеленностью текущей реализации на
    сценарный вариант. Предполагается, что в последующих версиях произойдет более четкое
    дробление, явно увязанное с особенностями реализации и использования.*

Обозначения
-----------

В языке, построенном на основе принципа единственного использования вычислительных ресурсов в сочетании с принципом единственного присваивания, отсутствует
понятие переменной. Вместо него вводится понятие обозначения как идентификатора,
поставленного в соответствие с каким-либо программным фрагментом. В пределах
некоторой области видимости использование идентификатора в качестве обозначения
должно быть уникальным. Обозначение получает тип и величину (значение) сопоставленного элемента и может использоваться для дальнейшей передачи этих параметров в любую точку
программы, обеспечивая тем самым копирование объекта, полученного в ходе вычислений.
В языке определены два способа задания обозначений:

- префиксное, при котором знак идентификатор пишется слева от знака "<<", а определяемый объект справа;
- постфиксное, когда слева от знака ">>" задается определяемый объект, а справа его идентификатор.

**$ обозначение :=**
    **идентификатор "<<" элемент |**
     **элемент ">>" идентификатор.**

Под элементом понимается любой из объектов языка. Идентификатор элемента. Понятия
объекта, выражения и блока будут даны ниже.

**$ элемент :=**
    **объект | выражение | блок |**
     **обозначение | идентификатор.**

Примеры::

    X << 100; Pi << 3.1415; 10 >> ten;
    (a, b):+ >> sum; x0 << y0 << 0;

.. note::

    *Следует отметить, что в данном языке все-таки появится присваивание, которое будет функционировать по принципу единственного присваивания. Это обусловлено тем, что при введении статической типизации появляются контейнерные объекты заданной размерности, в которые можно вводить данные, руководствуясь этими размерами. Также возможно появление аналогов структур (записей), имеющих поля с локальным именованием. В этих случаях тоже удобнее заносить данные внутрь этих конструкций путем единственного присваивания. Это же касается обобщений. Но обозначение все равно остается*
    
Объекты
-------

К объектам языка относятся конструкции, рассматриваемые при выполнении операций интерпретации как единое целое. Каждый объект характеризуется двойкой:

**<тип, значение>.**

При этом тип объекта задается с использованием статической типизации и определяется на этапе компиляции. Формат значения должен соответствовать установленному для него типу.

Объекты могут формироваться как до вычислений, так и в ходе их. Объект, сформированный до вычислений, является константой заранее предопределенного типа.

**$ объект := атом | список | функция.**

Существует неупорядоченное множество предопределенных типов, задаваемых соответствующими именами. Типы делятся на атомарные и составные. Атомарные типы и области их допустимых значений определяются аксиоматически. Составные типы являются комбинацией атомарных и уже существующих составных объектов. Они конструируются по заданным правилам. К составным объектам относятся описания функций и списки. Обозначения предопределенных
типов языка, используемые в данной версии, приведены в таблице.

.. table:: Предопределенные типы

    ======================== ================= ============ ===================
    Название типа            Обозначение типа  Организация  Значение
    ======================== ================= ============ ===================
    **сигнал**               signal            атом         !
    **логический**           bool              атом         false или true
    **целый**                int               атом         MinInt..MaxInt
    **вектор**               vector            составной    (@T).size
    **рой**                  swarm             составной    [@T].size
    **задержка**             delay             составной    {e@T} => v@T
    **функция**              func              составной    @T1 -> @T2
    **ошибка**               error             атом         enum of errors
    действительный           float             атом         MinFloat..MaxFloat
    символьный               char              атом         символ UTF-8
    *список данных*          datalist          составной    ()
    *параллельный список*    parlist           составной    []
    *задержанный список*     delaylist         составной    {}
    *спецзнаковый*           spec (nil)        атом         
    *базовая функция*        func              атом         @T1 -> @T2
    ======================== ================= ============ ===================

.. note::

    *В настоящее время реализован небольшой набор типов, позволяющий использовать язык для запланированных экспериментов. Расширение номенклатуры базовых типов планируется в дальнейших реализациях языка после отработки методов параллельной интерпретации и методов преобразования в параллельные программы для других архитектур.*
    
    *На текущем этапе в качестве базовых типов предполагается использовать только сигналы, логические и целые, позволяющие сформировать общую структуру всех основных операторов и операций, обеспечивающих формирование основного каркаса функционально-потоковой параллельной программы.*

Сигнал
-------

**Сигнальный тип** (или просто сигнал) отличается от других атомарных
типов тем, что не имеет конкретного значения и в динамике определяется только фактом своего появления. Для того, чтобы показать изначальное наличие сигнала, используется константа **"!"**. То есть, можно говорить о том, что сигнальный тип определяет только одну величину. Готовность величины сигнального типа определяется самим фактом появления атома. 

Появление  сигнала качестве результата определяет сам факт срабатывания соответствующего оператора интерпретации. Использование сигналов позволяет, при необходимости, моделировать в функциональных программах явное управление вычислениями. Они также могут сигнализировать о завершении работы функции, не возвращающей параметры.

Любая функция, не имеющая аргументов, может быть запущена только при наличии сигнала в качестве аргумента операции интерпретации. Постоянно присутствие сигнала, определяющее
«моментальный» запуск, задается следующим выражением::

    !:F

Формат сигнала, определяющий его внутреннее строение:

**<signal, !>.**

.. note::

    *В Пифагоре значение сигнального типа обозначалось через точку ("."). В данном случае появилось желание выделить это значение более четко из основного текста, так как точка перегружена и другими контекстами, которы предполагается еще больше расширить. В частности за счет использования принципа единственного присваивания.*

Значащие величины (константы)
-----------------------------

Атомы данного вида обеспечивают задание различных величин. Величина принадлежит области ее допустимых значений, которая, в зависимости от типа, может задаваться одним из следующих способов: диапазоном, диапазоном и точностью, перечислением элементов упорядоченного множества, перечислением элементов неупорядоченного множества (если нет необходимости устанавливать между элементами отношение порядка), функцией. В настоящее время в языке реализованы следующие виды
констант: целые, действительные, булевские, символы, константы ошибок, специальные
знаки. Тип константы в программе определяется ее внешним видом, задаваемым
синтаксическими правилами.

**$ константа := целая | логическая | сигнальная | спецзнак .**

.. note::

    *В Пифагоре присутствует большее число констант. Вполне возможно, что в дальнейшем их состав тоже будет расширен. Однако пока не принято решение, каким образом это расширение будет происходить. Предполагается, что в основе системы будет лежать Праязык, порождающий дочерние языки, ориентированные на различные предметные области за счет введения новых типов данных и операций над ними. Задачей Праязыка является обеспечение программоформирующего каркаса для всех потомков.*
    *Поэтому правило:*
    
    **$ константа := целая | действительная | символ |**
            **логическая | строка | спецзнак .**
    
    *Пока законсервировано.*
    
    *Помимо этого на данном этапе я предполаю создать версию языка, котора будет в основном поддерживать только формирование каркаса программы, описываемого моделью вычислений. То есть, речь идет о попытке выделить и создать Праязык, в котором будут присутствовать только минимально необходимые базовые функции. Далее будет интересно посмотреть, каким образом можно этот Праязык развивать в различных направлениях.*

Целая константа
~~~~~~~~~~~~~~~

**Целая константа** имеет предопределенный тип **int** и используется для представления данных в формате стандартного машинного слова, длина которого зависит от архитектуры ВС. В текущей версии языка
реализовано представление целых чисел только в десятичной системе счисления.

**$ целая := [ "+" | "-" ] {/цифра/}.**

**$ цифра := "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9".**

Примеры::

    127
    0127
    -356
    +10

Предполагается, что в соответствии с внутренним машинным представлением целочисленные константы располагаются в диапазоне **{MinInt, ..., MaxInt}**.

Например для 64-разрядной архитектуры в дополнительном коде это будет диапазон 
от -2\ :sup:`64` до 2\ :sup:`64` - 1. 

Логическая константа
~~~~~~~~~~~~~~~~~~~~

**Логическая константа** имеет предопределенный тип **bool** и может принимать значения "**true**" ("истина") или  "**false**" ("ложь"). Она задается соответствующими ключевыми словами.

**$ логическая := true | false.**

Для логических констант сохраняется отношение порядка:

**false < true.**

Логическая константа имеет тип **bool**

Сигнальная константа
~~~~~~~~~~~~~~~~~~~~~

**Сигнальная константа** имеет предопределенный тип **signal** и может принимать только одно значение **!**, указывающее на произошедшее событие, не связанное с другими типами данных.

Специальные знаки
~~~~~~~~~~~~~~~~~

**Специальные знаки** используются для задания предопределенных данных и
операций языка в зависимости от их местоположения относительно операции
интерпретации. Их смысл будет раскрыт при описании правил интерпретации. Эти
константы образуют неупорядоченное множество и используются в тексте программы как
разделители других конструкций.

**$ спецзнак :=**

    **"+" | "-" | "/" | "*" | "<" | ">" | "=" | ">=" | "<=" | "~=" | "=>" | "->" |**
    
    **"->" | "<-" | "()" | "{}" | "[]" | "|" | "#" | "%" | ".." | "?" | "!".**

Следует отметить, что ряд специальных знаков в настоящее время не используется и
зарезервирован для дальнейшего расширения языка.

.. note::

    *Перечисленный набор спецзнаков в дальнейшем может корректироваться. Также будет уточняться и их принадлежность к конкретному типу, что пока не описано. В целом предполагается, что большинство спецзнаков в контексте вычисления будут иметь функциональный тип (func). Вместе с тем, дуализм аргументов операции интерпретации может привести к тому, что ряд знаков будет интерпретироваться различным способом в зависимости от того, являются они данными или функциями в операторе интрепретации.*

Константы ошибок
~~~~~~~~~~~~~~~~

**Константы ошибок** имеют тип **error** ииспользуются для отображения некорректных ситуаций,
возникающих в ходе вычислений. Величины этого типа могут обрабатываться наряду с
другими данными или как исключительные ситуации.

Область допустимых значений для констант ошибки задается неупорядоченным
множеством, которое в дальнейшем предполагается пополнять. В настоящий момент
выделяются следующие ошибки:

- **ERROR** - неидентифицируемая ошибка;
- **REALERROR** - некорректное преобразование действительного числа;
- **INTERROR** - некорректное преобразование целого числа;
- **ZERODIVIDE** - деление на ноль;
- **INTERPRERROR** - ошибка операции интерпретации;
- **BOUNDERROR** - ошибка выхода за границы диапазона;
- **BASEFUNCERROR** – неправильное использование предопределенной функции.
- **NOERROR** - отсутствие ошибки

Эти имена запрещается использовать в программе в другом контексте.

**$ константа_ошибки := ERROR | REALERROR | INTERROR | ZERODIVIDE |**
    **| INTERPRERROR | BOUNDERROR | BASEFUNCERROR | NOERROR.**

Значени **NOERROR** формируется в том случае, если при получении  результата вычислений необходимо вместо конкретного значения ошибки вернуть информацию о том, что ошибка отсутствует.

.. note::

    *Предполагается, что по сравнению с Пифагором использование ошибок будет значительно переработано в сторону упрощения. Планируется, что каждая из констант ошибки будет являться отдельной функцией - обработчиком ошибки, предоставляющей информацию о типе ошибке и обеспечивающей обращение к системе для корректного завершения программы. На данном этапе не планируется введение системы обработки исключений. Хотя в дальнейшем такое развитие просматривается.*
    *Возможно, что реализация обработки ошибок будет сделана по аналогии с тем, как это реализовано в языке программирования GO. То есть, вместо выбрасывания исключений, будет формироваться значение, возвращаемое в качестве одного из результатов.*

Типы
---------

Язык ориентирован на использование статической системы типов. Предполагается что каждый тип, используемый в программе (функции) должен иметь имя. Существуют предопределенные (базовые) типы и сконструированные типы (типы, определяемые пользователями). Среди предопределенных можно выделить атомарные и составные типы. Все сконструированные типы являются составными (по определению).

**тип := атомарный_тип | составной_тип | производный_тип.**

Предопределенные атомарные типы
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

К атомарным относятся следующие предопределенные типы:

    - сигнальный тип (**signal**);
    - булевский тип (**bool**);
    - целый тип (**int**);
    - типовой тип (**type**);
    - любой тип (**any**);
    - ошибочный тип (**error**).

**$ атомарный_тип := сигнальный | булевский | целый | функциональный | ошибочный.**

**$ сигнальный := signal.**

**$ булевский := bool.**

**$ целый := int.**

**$ функциональный := func.**

**$ типовой := type.**

**$ любой := any.**

**$ ошибочный := error.**

**Сигнальный тип** обозначается ключевым словом "**signal**". Данные сигнального типа не имеют конкретных значений и определяют моменты появления управляющих воздействий, сигнализирующих о тех или иных ситуациях, возникающих в выполняемой функции. В принципе этом можно интерпретировать как то, что сигнальный тип может принимать только одно значение. Это значение связывается с константой "**!**".
По сути данные любого типа содержат сигнал, информирующий об их появлении. Отличие заключается в том, что все прочие данные имеют множество допустимых значений мощность которого больше единицы.

**Булевский тип** обозначается ключевым словом "**bool**". Данные булевского типа принимают значения из множества булевских констант (**true**, **false**), мощность которого равна двум.

**Целый тип** обозначается ключевым словом "**int**". Данные целого типа принимают значения из множества целочисленных констант, мощность которого определяется реализацией целых чисел в конкретной компьютерной архитектуре.

**Функциональный тип** обозначается ключевым словом **func**. К этом типу относятся предопределенные функции, также называемые операциями языка и обозначаемые в основном спецсимволами. Для обозначения предопределенных функций также используются зарезервированные идентификаторы. Помимо этого к функциональному типу также относятся все функции, разрабатываемые программистом.

**Типовой тип (тип типа)** обозначается ключевым словом **type**. Данные этого типа принимают значения из множества имен предопределенных типов и типов, созданных пользователем и используемым в текущей программе. По сути это некоторый перечислимый тип, значения которого расширяются по мере порождения пользователем новых именованных типов, определяемых через описания типов.

.. note::

    *Предполагается, что на текущем этапе данный тип реализовываться не будет информация о нем оставлена, чтобы не забыть обдумать его в дальнейших исследованиях.*

**Любой тип** обозначается ключевым словом **any**. Данные этого типа по сути являются вариантным обобщением для всех типов создаваемой программы от предопределенных до производных. По сути любой тип это двойка **<тип, значение>**, в которой хранимое значение определяется именем типа. Допускает приведение произвольных значений к данному типу с последующим возможным анализом имени типа полученного значения и соответствующим его выделением для выполнения необходимых операций.

.. note::

    *С другой стороны этот тип может рассматриваться как процедурно-параметрическое обобщение общего вида, формируемое автоматически сборкой имен типов в качестве признаков. То есть, можно будет создавать обработчики обобщений с использованием в качестве обобщающих аргументов тип* **any**.
    
    *Пока я обозначил этот тип. Более конкретный его анализ, включая полноту операций, планируется провести позднее. Также пока непонятно, стоит ли вообще вводить этот тип.*

**Ошибочный тип** обозначается ключевым словом "**error**". Данные ошибочного типа принимают значения из множества констант ошибок, которое задается путем перечисления видов ошибок, возможных в ходе выполнения функционально-потоковых параллельных программ. Данное множество может изменяться в ходе разработки системы функционально-потокового параллельного программирования.

.. note::

    *Следует отметить, что на текущий момент множество атомарных типов не включает ряд типов, которые традиционно присутствуют практически во всех других языках программирования. В частности, отсутствует тип, задающий числа с плавающей точкой. Предполагается, что ядро языка не будет ориентировано на типы данных, связанные с конкретными прикладными вычислениями. Также в нем будут отсутствовать функции, ориентированные на обработку этих типов. Добавление новых типов и функций планируется рассматривать как расширение ядра языка (Праязыка, Надязыка). При этом возможны различные варианты расширений, которые будут определять семейства проблемно-ориентировнных дочерних языков (языков - потомков), предназначенных для соответствующих предметных областей и параллельных вычислителей (в основном речь идет об ориентации на различные параллельные вычислительные архитектуры).*

Составные типы
~~~~~~~~~~~~~~~~~~~

**Составные типы** строятся на основе атомарных типов, а также уже сформированных составных типах. Они группируют используемые типы в контейнеры или выражения, обладающие определенными свойствами, что, в свою очередь, определяет семантику их использования в операторе интерпретации. К составным типам языка относятся:

    - вектор (**vector**);
    - массив (?) (**array**);
    - структура (**struct**);
    - кортеж (**tuple**);
    - обобщение (**union**);
    - рой (**swarm**);
    - поток (**stream**);
    - функция (**func**);
    - ссылка (**ref**).

.. note::

    *Использование статической типизации в целом значительно изменяет семантику языка. Затрагивает она и синтаксис. При формировании данного описания пока не делается разделение между моделью и языком. Это планируется сформировать позднее, осуществив необходимые переносы текста.*

Тип **Вектор** (векторный тип) обозначается ключевым словом **vector**. Он обеспечивает группировку данных одного типа, готовность которого к выполнению определяется при поступлении всех его элементов. 
Возможно формирование статических и динамических векторов. Длина статически определяемого вектора задается константным выражением, значение которого должно быть положительной целочисленной величиной используемой во время компиляции. Длина динамически порождаемого вектора вычисляется во время выполнения программы, но до начала его использования. Ее значение тоже должно являться положительным числом.

Элементы вектора задаются в виде списка значений, заключенных в круглые скобки:

    (элемент\ :sub:`1`, элемент\ :sub:`2`, ... элемент\ :sub:`N`)

Нумерация элементов, размещенных внутри вектора, начинается с единицы. Число N в данном случае определят длину вектора.  , так и круглые скобки. 
Описание векторного типа всегда требует указание длины вектора константным выражением и задается с использованием следующего синтаксиса:

**Вектор = ИмяТипа "(" Длина ")"**

**Длина = ЦелочисленноеКонстантноеВыражение**

Примеры описания векторных типов::

    A << type int(100)
    B << type bool(30)

Ключевое слово **vector** используется при проверки типа и приведении других типов данных к векторному типу (при наличии такой возможности).

.. note::

    Следует отметить, что одной из идей является использование многомерных массивов, задаваемых с использованием ключевого слова **array**. Это расширяет параллелизм на многомерные конструкции. Возможное их описание может быть представлено следующим синтаксисом:
    Массив ::= ИмяТипа "(" Размерность ")"
    Размерность ::= ЦелочисленноеКонстантноеВыражение 
    { "," ЦелочисленноеКонстантноеВыражение }

    Примеры массивов::
    
        AA << type int(100, 100)
        BB << type bool(30, 40)
    
    Однако пока мне непонятно, каким образом лучше реализовать массивы. Прямое решение не выглядит достаточно эффективным из-за проблем с использованием многоразмерных индексных выражений. В дальнейшем, как вариант, предполагается рассмотреть реализацию массивов в виде расширения векторов. То есть в виде некторой оболочки, которая добавляет индексы к вектору. Тогда для выбора любого элемента массива планируется преобразование его индексов к индексу вектора путем специальной операции **index**. Например: `A:{index'(i,j,k)`. Этот вариант видится мне более предпочтительным. Не смотря на то, что вектор уже не будет частным случаем массива, данный вариант позволяет рассматривать приведение массива к вектору и вектора к массиву...
    На данном этапе реализацию многомерных массивов реализовывать не планируется.

Тип **Структура** (структурный тип) обеспечивает группировку разнотипных данных по аналогии со структурными типами различных языков программирования. Структура состоит из полей, каждое из которых имеет имя и тип. Описание структуры имеет следующий синтаксис:

**Структура = "(" ПолеСтруктуры { "," ПолеСтруктуры } ")"**

**ПолеСтруктуры = ИмяПоля "@" ИмяТипа**
        **| "[" ИмяПоля { "," ИмяПоля } "]" "@" ИмяТипа**

Примеры структурных типов::

    Triangle << type (a@int, b @ int, c @int)
    Rectangle << type ([x,y]@int)

Тип **Кортеж**, как и структура, предназначен для группирования неоднородных данных. Он отличается от структуры отсутствием именованных полей. По сути он похож на вектор, но может содержать разнотипные элементы. Обращение к элементам кортежа осуществляется по номеру поля (поля, как и в векторе, нумеруются, начиная с единицы). Для задания кортежей используется следующий синтаксис:

    **Кортеж = "(" ИмяТипа { "," ИмяТипа } ")"**
    
Примеры задания типов кортежей::

    С << type (int)
    В << type (int, bool, signal)

.. note::

    По всей видимости допустимо преобразование вектора в кортеж, а также кортежа в вектор при условии, что все элементы кортежа имеют один тип. Также стоит обдумать допустимость преобразования в кортеж структуры с идентичными полями, а также соответствующее преобразование кортежа в структуру.
    
Тип **Обобщение** (обобщающий тип) во многом аналогичен по организации и использованию обобщениям, используемым в других языках. Основной его задачей является объединение воедино взаимоисключающих структур. Существуют различные подходы к организации обобщений, включая методы, поддерживающие полиморфизм. В языке предполагается использование процедурно-параметрических обобщений, обеспечивающих более гибкую поддержку эволюционного расширения программ по сравнению с другими подходами. Правила, определяющие синтаксис обобщений имеют следующий вид:

**Обобщение = "{" ПолеОбобщения { "," ПолеОбобщения } "}"**

**ПолеОбобщения = ИмяТипа { "," ИмяТипа }**
                **| ИмяПризнака "@" ИмяТипа**
                **| "[" ИмяПризнака { "," ИмяПризнака } "]" "@" ИмяТипа**

Примеры описания обобщений::

    Figure1 << type {Triangle, Rectangle}
    Figure2 << type {trian@Triangle, 
                    rect@Rectangle, 
                    rhomb@Rectangle}
    WeekDay << type{[Sun,Mon,Tue,Wen,Thu,Fri,Sat]@signal}

.. note::

    Пока вопрос с обобщением и их использованием рассматривается на уровне мономорфизма. То есть, предполагается явный анализ признаков обобщения, аналогичный тому, как это делается с объединениями в Си и вариантными записями в Паскале. Применение процедурно-параметрического полиморфизма или других вариантов планируется только в следующих версиях.

Тип **Рой** (роевой тип) используется для описание независимых данных, над которыми возможно выполнение массовых параллельных операций. Обозначается ключевым словом **swarm**. Все элементы роя имеют один тип, а функция, осуществляющая их обработку, может одновременно выполняться над каждым элементом. Результатом является также рой, размерность которого равна размерности роя аргументов. Синтаксические правила, определяющие данный тип, имеют следующий вид:

**Рой = ИмяТипа "[" Целое "]"**

Пример описания типа::

    R << type int[100]

Рой обеспечивает группировку данных одного типа в вектор, готовность которого к выполнению определяется при поступлении любого его элементов. В отличие от вектора функция, определяемая в операторе интерпретации, выполняется над каждым элементом роя, что обеспечивает неявное задание массового параллелизма. Запуск функции осуществляется асинхронно при появлении в группе очердного элемента. Полученный в ходе выполнения функции результат также асинхронно поступает дальше, если функция имеет возвращаемый тип, который является роем.

Возможно формирование роев фиксированной и переменной размерности, каждый из которых обладает своими свойствами и может обрабатываться своим множеством функций. Множества функций для обработки разных видов роев пересекаются, но не перекрываются. Элементы роя задаются в виде списка значений, заключенных в квадратные скобки::

    [элемент\ :sub:`1`, элемент\ :sub:`2`, ... элемент\ :sub:`N`]

Нумерация элементов, размещенных внутри роя, начинается с единицы. Число N в данном случае определят размер роя. Размер роя может быть задан константным выражением при описании его типа в том случае, если объявляется рой с фиксированной размерностью.

.. note::

    Как и для вектора пока предлагается только одномерное решение. Хотя есть соблазн разобраться и с реализацией многомерных роев. Но пока данный вопрос остается нерешенным.
    Следует также отметить, что существует соблазн изменить правила использования роя в сторону упрощения по сравнению с параллельными списками Пифагора. В частности просматривается самый простой вариант, когда использование роя допускается только на самом верхнем уровне вложенности. Или, как более сложный вариант, не допускается непосредственное вложение роев друг в друга, а также функции, которые ведут к организации такого вложение. 
    Пример последнего: `([...],[...]):[]`. Пока предпочтительным смотрится более простой вариант.

Тип **Поток** является альтернативой асинхронному списку [10]. Он используется для обработки данных поступающих последовательно и асинхронно в произвольные промежутки времени. Размерность поступающих данных при этом неизвестна, поэтому завершение обработки возможно только по признаку конца потока. Поток готов к обработке при наличии в нем хотя бы одного элемента. Тип всех элементов потока одинаков. Синтаксические правила, определяющие поток:

**Поток = ИмяТипа «{» «}»**

Пример описания потокового типа::

    A << type int{}

Тип **Функция** (или функциональный тип) позволяет задать сигнатуру функции, определяя имя типа, тип аргумента, а также тип результата. В целом определение функционального типа отличается от общепринятых в других языках программирования только тем, что любая функция имеет только один аргумент и возвращает только один результат. Синтаксические правила, определяющие описание функционального типа:

**ФункциональныйТип = func Аргумент «->» Результат**
**Аргумент = ИмяТипа | Кортеж**
**Результат = ИмяТипа | Кортеж**

Примеры описаний::

    F << type func int -> int
    F2 << type func (bool, int, int) -> (int, bool)

.. note::

    Возможны в перспективе варианты, когда функция возвращает вектор, массив, рой или поток. Но пока так глубоко копать не буду...
    Интерес также представляет задание структуры в качестве типа. Но в данной ситуации предполагается, что использование кортежа обеспечивает структурную эквивалентность ипозволяет в дальнейшем подставлять любые структурно эквивалентные типы...

Тип **Ссылка** (или ссылочный тип) обеспечивает поддержку указателей на различные хранилища определенного типа, что позволяет передавать значения между функциями без их копирования. Основное назначение заключается в дополнительном контроле типов в ходе передач. Синтаксические правила, определяющие описание ссылочного типа:

**Ссылка = «&» ИмяТипа**

**ОткрытыйВектор = ИмяТипа "(" "*" ")"**

**ОткрытыйМассив = ИмяТипа "(" "*" { "," "*" } ")"** (???)

.. note::

    Тоже пока вызывает много вопросов. Требует проработки...

Описания типов
------------------

Описания позволяют создавать новые именованные типы, определяя их через предопределенные типы или используя уже сформированные описания типов. Имя создаваемого типа задается идентификатором, который используется в качестве обозначения. Далее следует само описание, которое начинается с ключевого слова **typedef**.

**$ описание_типа = имя_нового_типа "<<" type тип.**

Основная идея заключается в создании новых типов, которые напрямую не наследуют свойства уже созданных типов, что позволяет применять в качестве конструирования переименование. В отличие от алиасов все операции исходного типа напрямую недоступны. Ипользовать их можно только после явного приведения созданного типа к типу предшественника. В связи с этим допускается использование предопределенных атомарных типов, имеющих имя, для построения новых типов. Например::

    apple << type int

Создание новых типов на основе составных обеспечивает формирование именованных абстрактных типов данных с требуемыми полями и свойствами. Эти типы могут создаваться на основе любых составных типов и использоваться в различных манипуляциях, допускаемых над величинами, имеющими типовой тип. Например::

    intPair << type int(2)

.. note::

    В данной версии языка предполагается, что будет использоваться только (или в основном) именованая эквивалентность типов. То есть, два типа будут считаться эквивалентными, если они имеют одинаковые имена. Это, на мой взгляд, обеспечит более строгий контроль типов и позволит проводить формальную верификацию программ в более широком диапазоне. Поэтому, в большинстве случаев перед сравнением типов необходимо будет осуществлять явное преобразование к нужному типу, если такое возможно в соответствии с используемым механизмоа преобразования (приведения) типов. Но без структурной эквивалентности в ряде случаев просто не обойтись. Поэтому данный вопрос требует детальной проработки...

Преобразование (приведение) типов
---------------------------------------

Механизм преобразования типов обеспечивает определенную гибкость в манипуляции абстракциями. Можно выделить статическое и динамическое преобразование типов. При статическом пробразовании типов этим процессом занимается компилятор. То есть, все возможные ошибки определяются на этапе компиляции. Динамическое приведение типов осуществляется во время выполнения программы и связано в основном с преобразованиями обобщений посредством функций преобразования типов, которые вводятся в язык для повышения гибкости. Описание этих функций будет сделано при рассмотрении оператора интерпретации.
Следует также отметить, что преобразования осуществляются не с самими типами а над величинами, имеющими некоторый тип, которые преобразуются к величинам другого типа.

Статические преобразования типов во время компиляции
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Возможны следующие статические преобразования типов величин:

#. Тип любой величины может быть преобразован к сигнальному типу. При этом значение исходной величины теряется. По сути сигнальный тип является обобщением всех других типов, так как он несет только информацию (сигнал) о готовности данных.

#. Именованный тип любой величины может быть преобразован к типу **any**. В этом случае формируется структура, определяющая любой тип, которая хранит имя преобразуемого типа, а также сохраняет его значения. Дальнейшие манипуляции с полученной величиной, включая преобразование ее типа, могут проводиться только во время выполнения программы.

#. Именованный тип, сформированный определением типа в описании **typedef** на основе другого именованного типа, может быть преобразован к своему родительскому типу на этапе компиляции. При этом значение программного объекта не меняется. Данное приведение позволяет выполнять над имеющимся значением все операции над родительским типом.

#. Именованный родительский тип, используемый при определении нового типа в описании **typedef**, может быть преобразован к этому новому типу на этапе компиляции. При этом значение существующей величины не изменяется. Над преобразованной величиной возможны только функции, определенные над этим новым типом.

#. Формируемые в программе величины, имеющие структуру, эквивалентную некоторым именованным типам, могут быть преобразованы к этим типам на этапе компиляции.

Представленные преобразования могут осуществляться как явно, так и неявно. Явные преобразования предполагают непосредственное использование функций приведения типов, обеспечивающих получение соответствующих новых типов. Например::

    6: apple                      int       ⇒ @apple
    (3,4):intPair                 (@int).2  ⇒ @intPair
    (1,2,3,4,5):signal            (@int).5  ⇒ @signal
    
Неявные преобразования связаны с использованием формируемых в программе величин в качестве аргументов функций, тип которых задается при их определении. Так как тип компилятору заранее известен, то в этом случае его преобразование будет однозначным. Например::

    func'+' << funcdef x@intPair->@int {...}
    (3,4):+     ⇒ (3,4):intPair:+

Последнее преобразование возможно только в том случае, если имеется однозначное определение функции. Возможно ситуация, когда имя функции перегружено, а ее уникальность определяется сигнатурой. В этой ситуации возможны функции с разной сигнатурой, аргументы которых имеют типы, созданные от одного родителя. Тогда невозможно определить, какую из функций подставить. В этой ситуации требуется явное приведение типа. Например::

    apple << typedef int;
    pear  << typedef int;
    f1 << funcdef x@apple->@signal {...}
    f1 << funcdef xpear->@signal {...}
    5:pear:f1       -- явное приведение для выбора нужной функции
    
Преобразование между атомарными константами
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Зачастую при использовании констант удобнее использовать неявные преобразования для восприятия написанного кода. В частности во многих языках программирования целочисленный ноль (0) в зависимости от контекста может восприниматься как действительное число (0.0).
Аналогичные неявные преобразования значений констант предполагается использовать и в разрабатываемом языке в тех случаях, когда контекст константы очевиден. В частности на данный момент просматриваются следующие неявные преобразования:

#. Для булевских величин вместо **true** и **false** допускается неявно использовать целочисленные константы **0** и **1** соответственно. Эту возможность предполагается использовать для разработки функций, реализующих булевские функции, которые впоследствии планируется транслировать в топологию ПЛИС. Удобнее в этом случае манипулировать числами, отображающими булевские значения. Преобразование осуществляется на этапе компиляции.

Функция
---------

**Функция** – составной объект, конструируемый специальным образом. Она задается
определением, начинающимся с ключевого слова **funcdef**. Функция состоит из заголовка и тела. 
В заголовке указывается идентификатор аргумента, обеспечивающего передачу в тело
функции необходимых данных и его тип, а также тип результата, возвращаемого из функции. 
В теле описывается алгоритм обработки аргумента с применением соответствующих элементов языка. Доступ к исходным данным осуществляется только через аргумент. Тело функции состоит из элементов,
заключенных в фигурные скобки и разделяемых между собой символом **";"**.

В ходе выполнения функции обычно формируется результат, который возвращается
после применения к нем функции возврата, обозначаемой зарезервированным идентификатором **return**:

``результат:return`` или ``return^результат``

Помимо этого ключевое слово **return** может использоваться в качестве альтернативного варианта точки возрата, когда оно задает не функию, а обозначение возвращаемого значения:

``результат >> return`` или ``return << результат``

Этот вариант предназначен для случаев, когда из функции необходимо возвратить величину задержанного типа.

Возвращаемый результат может быть любым допустимым значением, полученным в
ходе вычислений. Возврат результата может осуществляться до завершения выполнения всех
операций в теле функции, которая продолжает существования до завершения всех
внутренних операций. В этом случае в теле функции будет наблюдаться побочный эффект, который может быть связан либо с какими-то дополнительными фоновыми действиями, либо с ошибкой в ее реализации. Однако повторного возврата, в соответствии с принципом единственного присваивания, произойти не может.
Избавление от побочных эффектов, если они являются лишними, осуществляется путем анализа и оптимизации тела функции соостветствующими методами анализа.

В случае параллельного списка возможен асинхронный (не одновременный) возврат его независимых элементов. Также в качестве возвращаемого значения может выступать сигнал.

**$ функция := "funcdef" [ имя_аргумента "@" имя_типа_аргумента ]**
        **["->" "@" тип_результата] [тело_функции].**

**$ тело_функции := [ "{" [ элемент {";" элемент }] "}" ].**

При отсутствии в определении функции аргумента предполагается, что он имеет сигнальный тип, использование которого в теле фунции не имеет смысла. Однако такой аргумент всегда присутствуе при вызове функции, определяя момент ее запуска. В этом случае сигнал может задаваться константой, указывая на немедленный запуск функции. Или же он может являться вычисляемым значением, что позволяет отложить запуск функции без параметров на некоторое время.

Тип возвращаемого значения также может не указываться. В этом случае предполагается что функция возращает сигнал. Также возврат сигнального значения может быть задан явно.

Отсутствие у функции тела интерпретируется как ее **предварительное объявление**. Оно
полезно, когда функция еще окончательно не реализована, но знание ее сигнатуры необходимо в других функциях, например, при наличии рекурсивных вызовов. Следует отметить, что окончательное определение функции, включающее ее тело должно быть сформировано до момента сборки программы.

Под программой понимается совокупность полностью определенных и взаимосвязанных функций, обеспечивающих решение поставленной задачи.

Перегрузка имен функций
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

В языке поддерживается статический полиморфизм, реализуемый за счет перегрузки имен функций. Это предполагает идентификацию функций по уникальности сигнатуры, состоящей из имени функции и типа аргумента.

Определение спецзнаков в качестве имен функций
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Специальные знаки могут использоваться в качестве имен функций за счет их специального обозначения, имеющего следующий формат:

**$специальное_имя := funcdef """ спецзнак """.**

Допускается также перегрузка функций, обозначенных специальными именами.

Базовые функции
~~~~~~~~~~~~~~~~~

Базовые функции задаются их именами, являющимися зарезервированными словами и спецсимволами. Большинство этих функций могут выполняться во время компиляции константных выражений. Данные функции определяют основные программо-формирующие операции, обеспечивающие, наряду с программо-формирующими операторами формирование структуры программы.


Блок
----

**Блок** - это объединение элементов внутри тела функции, служит для логического
соединения группы операторов выполняющих законченное действие, а также для
локализации обозначений. Он начинается с ключевого слова **block**, за которым следует тело
блока, аналогичное телу функции. Отличие тела блока заключается в том, что выход из
него осуществляется по обозначению результата зарезервированным идентификатором
**break**, с которым связывается значение, возвращаемое из блока. Данное ключевое слова (как и **return**) может выступать в качестве функции или обозначения.

Использование **break** в качестве функции:

``результат:break`` или ``break^результат`` 

Использование **break** в качестве обозначения:

``результат >> break`` или ``break << результат``

Тип значения, возвращаемого из блока, должен быть известен компилятору и определяется из анализа элементов, входящих в блок или явно задается программистом.

**$ блок := "block" "{" [ элемент {";" элемент }] "}".**

Выражение
---------

**Выражение** - это терм или цепочка термов, связанных между собой операциями
интерпретации. Под термом понимается объект, блок или
имя ранее обозначенного элемента. Наличие операции интерпретации позволяет трактовать
два ее операнда как функцию и аргумент. Существуют префиксная и постфиксная формы
записи операции интерпретации, отличающиеся друг от друга только порядком следования
аргумента и функции. Префиксная операция интерпретации задается стрелкой вверх **"^"**,
слева от которой стоит терм, выступающий в роли функции, а справа - аргумент: **F^X**. При
постфиксной записи это же выражение будет выглядеть следующим образом: **X:F**.
В том случае, если операция интерпретации возвращает ошибку, выполнение текущей функции прекращается. Ошибка порождает соответствующие системные сообщения и инициирует прекращение выполнения программы.

**$ выражение := терм {( "^" выражение | ":" терм )}.**

**$ терм := объект | блок | идентификатор.**

Приведенный синтаксис выражения показывает, что префиксная операция интерпретации выполняется справа налево, а постфиксная и обработка альтернатив слева направо. Изменение приоритетов можно осуществить использованием фигурных, квадратных или круглых скобок, являющихся операторами группировки, и,
следовательно, формирователями новых промежуточных объектов.

Операторы
--------------

Операторы языка определяются в соответствии с функционально-потоковой моделью вычислений. Они обеспечивают формирование каркаса функции. Выделяются операторы группировки и оператор интерпретации.

**Операторы группировки** обеспечивают формирование значений составных типов. К ним относятся:

- оператор формирования вектора, обеспечивающий создание объектов векторного (**vector**) типа;
- оператор формирования группы, обеспечивающий создание группового (**group**) типа;
- оператор задержки, обеспечивающий создание задержанного (**delay**) типа.

.. note::

    Наряду с этими основными операторами нужно обратить внимание, что статическая типизация позволяет создавать составные типы с фиксированной структурой, доступ к элементам которых может обеспечиваться записью в отдельные поля с соблюдением принципа единственного присваивания.
    Необходимо не забыть и описать соответствующие группы операторов для выше определенных типов данных с фиксированной структурой.
    
**Оператор интрепретации** обеспечиваеь запись функциональных преобразований. Один из его входных параметров является функцией, а другой определяет аргумент, обрабатываемый этой функцией. Используются префиксная и постфиксаная формы оператора интрепретации.
В префиксной форме оператор обозначается знаком **^**. В этом случае функция **F(x)** будет записана ка **F^x**. Оператор интрепретации в постфиксной форме задется двоеточием (**:**), что позволяет записать приведенную функцию в виде **x:F**.

Структура программы
--------------------

Программа состоит из множества программных объектов, взаимосвязанных между собой по контексту, наполнение которого определяется стартовой функцией. Эта функция запускается в начале выполнения программы и содержит вызовы других функций, использует различные типы данных и константы. Исходя из этого совокупность всех артефактов, доступных из стартовой функции и определяет общую структуру программы.

.. note::

    *Пока удовлетворюсь этим описанием, которого явно мало.*

Программа содержит множество описаний, каждое из которых обозначено некоторым именем.

**$ обозначенное_описание := {/ идентификатор "<<" /}**
       **описание {">>"идентификатор}**
        **| [описание">>"] идентификатор {/ ">>" идентификатор /}.**

**$ описание := функция | const константное_выражение | описание_типа.**

**Константное выражение** - это любой объект языка, вычисляемый на этапе
компиляции, и используемый в последующих выражениях как атомарная константа, вектор или группа, атомами которых на самом нижнем уровне вложенности являются константы.

Пример::

    pi << const 3.14

Предопределенные функции и данные
---------------------------------

**Предопределенные функции и данные** формируются на основе атомов, каждый из
которых может быть в роли как аргумента, так и функции оператора интерпретации. При этом ряд
атомарных объектов могут выступать только в роли данных, другие - в роли функций, третьи - в той и другой.

Большинство специальных знаков используются как предопределенные функции. Обычно за ними закрепляются вычислительные операции, традиционные для этих значков в большинстве существующих языков программирования. Задаются допустимые аргументы и значения этих функций. При этом типы аргумента и результата являются именованными типами и определяется аксиоматически при описании функции. Допускается перегрузка предопределенных функций.

.. note::

    *В данный момент я пытаюсь выделить подмножество предопределенных функций, предназначенных для формирования каркаса ФПП программы, характерного для Праязыка. В таком виде программа вряд ли может создаваться, так как минимальный набор манипуляций с данными (сравнения и т.д.) необходим даже для самого базового языка.*

    *В рассматриваемой версии не все спецзнаки имеют определенную семантику. Предполагается, что в дальнейшем она будет разрабатываться и уточняться. Наряду со специальными знаками в качестве предопределенных функций могут выступать и идентификаторы, которые, как и ключевые слова, запрещены для других применений.*

Ниже приводится описание семантики предопределенных функций, используемых в текущей версии. Следует отметить, что для аргументов, тип которых при описании не задан результатом будет ошибка: «неправильное использование предопределенных функций».

Предопределенные базовые функции языка
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Предопределенные базовые функции обеспечивают формирование общего каркаса создаваемой функции. Они могут задаваться с использованием ряда спецсимволов, ключевыми словами, булевскими и целыми константами.

Использование сигнальной константы "**!**"
"""""""""""""""""""""""""""""""""""""""""""""

Данная функция имеет следующую сигнатуру::

    func"!" << funcdef @any -> @any

Данный специальный знак зарезервирован для обозначения сигнальной константы, имеющий тип **signal**. 
При использовании в качестве функции знак "**!**" интерпретируется как пустая операция, осуществляющая пропуск значения аргумента в качестве результата. То есть данном знаку можно сопоставить следующее определение функции::

    func"!" << funcdef x@any { 
        x >>return 
    }

То есть, если аргумент является вектором, группой или атомом, то происходит его выдача в качестве результата. 
Если же аргумент определен как задержка, то преварительно оператор интерпретации осуществляет ее раскрытие, ведущее к вычислению задержанного выражения. Полученное значение передается функции, которая и возвращает его уже без дополнительных изменений.

Пример::

    {(2,3):+}:! ⇒ 5

.. note::

    *Текст, размещенный в примечании подлежит пересмотру.*
    
    Использование этой операции позволяет получать из параллельного списка последовательный список данных (в соответствии с правилами эквивалентных преобразований)::

    [2,3]:(!) ⇒ (2,3)

Использование сигнальной константы в качестве аргумента интерпретируюется как отсутствие аргумента.  
Он может использоваться для формирования операции интерпретации тех функций, которые не получают аргументов. 
Вместо этого **"!"** интерпретируется как сигнал, запускающий функцию в требуемый момент времени. Например, пусть будет задана функция::

    sin_pi_div_4 << funcdef ->@float {
        (3.14, 4.0):/:sin >>return
    }

Тогда ее вызов будет оформлен следующим образом::

    !:sin_pi_div_4

Использование целых чисел в качестве функции
"""""""""""""""""""""""""""""""""""""""""""""

Данная функция имеет следующую сигнатуру::

    func"@int" << funcdef (@any) -> @any

Целые положительные числа могут использоваться для выбора элементов из векторов. То есть они по сути могут выступать в качестве индексов. Целые отрицательные числа обеспечивают удаления из векторов элементов с индексом равным абсолютному значению индексирующего числа. То есть, после этой операции размер вектора уменьшается на единицу. Например::

    (10, 9, 8, 7, 6, 5, 4, 3, 2, 1):5 ⇒ 6
    (10, 9, 8, 7, 6, 5, 4, 3, 2, 1):-5 ⇒ (10, 9, 8, 7, 5, 4, 3, 2, 1)

В случае нулевого значения порождается ошибка **BOUNDERROR**, сигнализирующая о неправильном индексирующем значении. 

Использование булевских значений в качестве функций
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

Функция, определяемая булевским значением, имеет следующую сигнатуру::

    func"@bool" << funcdef (@any).2 -> @any

Она осуществляет выбор первого или второго элемента двухэлементного вектора в зависимости от значения. Значение ```true``` обеспечивает выбор первого элемента вектора, а значение ```false``` - второго. Оба значения должны принадлежать одному и тому же типу. По сути это селектор значения, реализующий простейшее условие выбора. Например::

    (10, 20):true  ⇒ 10
    (10, 20):false ⇒ 20

Использование знака "|"
"""""""""""""""""""""""

Данная функци имеет следующую сигнатуру::

    func"|" << funcdef (@any) -> @int

Знак **"|"** задает функцию нахождения длины списка. Аргумент – список данных любой
размерности и любого типа элементов. Результат – целое число, задающее количество
элементов в списке первого уровня вложенности.

Если аргумент не является списком, то результатом является ошибка операции интерпретации **BASEFUNCERROR**. Использование функции позволяет проверить размер аргумента перед обработкой, а лишь затем начать выделение его элементов.

Примеры::

    (a, n, (q, w), s):| ⇒ 4
    (1, 2, 3, 4, 5):| ⇒ 5
    ((1, 2, (f, d), x)):| ⇒ 1

Знак **"|"** в качестве аргумента имеет тип **func**.

Функция "?"
""""""""""""""

Данная функци имеет следующую сигнатуру::

    func"?" << funcdef (@bool) -> [@int]

Она выполняет роль фильтра истинных значений, образуя из них группу, размер которой определяется количеством истинных значений в исходном векторе. Значения отдельных элементов результата равны порядковому номеру истинных значений в исходном списке. Например::

    (true, false, true):? ⇒ [1, 2]
    
.. note::

    *В качестве развития темы интерес представляет использование в качестве аргументов не только векторов, но и групп. Нужно будет подумать. В принципе отличие по использованию можно задать как раз за счет использования двойной интерпретации. Это же интересно продумать и для других вариантов, определяя тем самым асинхронную обработку данных вместо синхронизации.*

Использование знака "?"
"""""""""""""""""""""""

Функция **"?"**, осуществляет вычисление номеров позиций истинных булевских констант в булевском
списке данных. В качестве результата формируется параллельный целочисленный список с
номерами тех элементов списка аргументов, чьи значения были равны true. Функция
полезна для организации выборочного продолжения дальнейших вычислений.
Полученные целочисленные значения используются для выбора элементов из списков
данных. Например::

    (true, false, true, false, false, true):? ⇒ [1, 3, 6]

Если список состоит только из ложных значений, на выходе формируется
пустой параллельный список, автоматически преобразуемый в ошибку базовой функции::

    (false, false, false):? ⇒ [] ⇒ BASEFUNCERROR

Это позволяет непосредственно использовать результат проверки для выбора элементов списка. При пустом параллельном списке выбор из списка данных не происходит, а возвращается неопределенная ошибка::

    (false, (7), 5):BASEFUNCERROR ⇒ ERROR

Поэтому идентификацию возврата функцией **"?"** корректного значения необходимо после ее выполнения. Знак **"?"** в качестве аргумента имеет тип **spec**.

Использование знака "#"
"""""""""""""""""""""""

Знак **"#"** используется для задания функции транспонирования элементов списка подсписков.
Он аналогичен матрице, но отличается от последней тем, что количество элементов в разных
строках может отличаться. Результатом является транспонированный список подсписков, в
котором элементы первой строки будут состоять из первых элементов подстрок
обрабатываемой строки, вторая строка будет состоять из вторых элементов и т.д. В
результате транспонирования списка, состоящего из подсписков разной длины, происходит
перераспределение длины строк. Последние строки будут более короткими. Данная операция
в результате оказывается необратимой.

Пример::

    ((1,2,3),(4,5,6,7),(8),(9,0)):# ⇒ ((1,4,8,9),(2,5,0),(3,6),(7))
    ((1,4,8,9),(2,5,0),(3,6),(7)):# ⇒ ((1,2,3,7),(4,5,6),(8,0),(9))

Знак **"#"** в качестве аргумента имеет тип **spec**.

Использование знака "()"
"""""""""""""""""""""""""

Задает функцию охвата аргумента круглыми скобками. Аргумент – любой элемент. При использовании в качестве аргумента атома или списка данных операция **"()"** создает одноэлементные списки::

    атом:() ⇒ (атом)
    (элемент, ... элемент):() ⇒ ((элемент, ... элемент))

Если в качестве аргумента вступает параллельный список, то операция группировки в
список выполняется над каждым из его элементов::

    [элемент, ... элемент]:() ⇒ [элемент:(), ... элемент:()]

Задержанный список перед выполнением данной функции как обычно раскрывается в
параллельный, а затем интерпретируется::

    {элемент, ... элемент}:() ⇒
        ⇒ [элемент, ... элемент]:() ⇒
        ⇒ [элемент:( ), ... элемент:()]

Знак **"()"** в качестве аргумента имеет тип **spec** и задает пустой список данных.

Использование знака "[]"
"""""""""""""""""""""""""

Задает функцию преобразования в параллельный список. Если аргумент является
списком данных, то он преобразуется в параллельный список путем преобразования
внешних круглых скобок в квадратные. Над атомами она выполняется как пустая операция::

    атом:[] ⇒ [атом] ⇒ атом

Если аргумент является списком данных, то он заменяется на параллельный список::

    (элемент, ... элемент):[ ] ⇒ [элемент, ... элемент]

При аргументе, имеющим тип "параллельный список", функция выполняется над каждым из его элементов::

    [элемент, ... элемент]:[ ] ⇒ [элемент:[ ], ... элемент:[ ] ]

Такое же выполнение будет и при задержанном списке в качестве аргумента. Однако перед этим происходит раскрытие задержанного списка и вычисление каждого из его элементов::

    {элемент, ... элемент}:[ ] ⇒
        ⇒ [элемент, ... элемент]:[ ] ⇒
        ⇒ [элемент:[ ], ... элемент:[ ] ]

Знак **"[]"** в качестве аргумента имеет тип **spec**.

Использование знака "{}"
"""""""""""""""""""""""""

Использование функции формирования задержанного списка, задаваемой знаком **"{}"**,
позволяет создавать из других объектов задержанные списки::

    атом:{} ⇒ {атом}
    (элемент, ... элемент):{} ⇒ {элемент, ... элемент}
    [элемент, ... элемент]:{} ⇒ [элемент:{}, ... элемент:{}]
    {элемент, ... элемент}:{} ⇒
        ⇒ [элемент, ... элемент]:{} ⇒
        ⇒ [элемент:{}, ... элемент:{}]

Знак **"{}"** в качестве аргумента имеет тип **spec**.

.. note::

    *В текущей версии интерпретатора генерируется «ошибка интерпретации». В целом пока непонятно, зачем нужна эта функция, так как создать задержанный список можно только в том случае, если в аргументах есть элементы, содержащие задержанные списки. Но в целом это не противоречит самой идее конструирования подобных программных объектов.*

Использование знака ".."
"""""""""""""""""""""""""

Знак **".."** используется в качестве функции, формирующей список данных из числовых
атомов. В качестве аргумента может выступать трехэлементный числовой список, в котором
первое число задает начало интервала, второе - его конец, а третье - шаг. Числа могут быть
как целые, так и действительные, а шаг принимать как положительные, так и отрицательные значения. Необходимо отсутствие расхождений между значением шага и границами
интервала.

Кроме этого аргумент функции может быть двухэлементным целочисленным списком.
В этом случае первый элемент определяет нижнюю целочисленную границу интервала, а
второй верхнюю. При этом нижняя граница должна быть меньше или равной верхней
границе, а шаг по умолчания принимается равным единице. При некорректном задании
границ интервала данная функция возвращает ошибку **BOUNDERROR**. Если некорректно
задана структура списка или тип его элементов, то возвращается ошибка предопределенной
функции **BASEFUNCERROR**.

Примеры::

    (-3.5, 2.0, 1.5):.. ⇒ (-3.5, -2.0, -0.5, 1.0)
    (1, 5):.. ⇒ (1, 2, 3, 4, 5)
    (2, 1):.. ⇒ (BOUNDERROR, (2,1))


Знак **".."** в качестве аргумента имеет тип **spec**.

.. note::

    *Пока, при неправильных границах возвращается ошибка интерпретации и выполнение завершается. В дальнейшем предполагается введение интервальных констант, задающих необходимый диапазон. Их использование позволит сформировать параллельный список на более поздних стадиях. Помимо этого предполагается, что в качестве результата этой функции будет возвращаться параллельный список.*

Использование данных
~~~~~~~~~~~~~~~~~~~~~

Многие данные тоже могут допускать различное толкование в зависимости от того, в
какой части операции интерпретации они встретились.

Использование целочисленной константы
""""""""""""""""""""""""""""""""""""""

Целочисленная константа может интерпретироваться как функция выбора элемента из
списка. Аргумент – список любой размерности, содержащий элементы любого типа.
Результат зависит от значения константы.

Если константа является положительном числом в диапазоне от 1 до величины, равной
длине списка, то результат равен элементу из этого списка, порядковый номер которого
соответствует значению константы. Если значение константы превышает длину списка,
выдается ошибка **BOUNDERROR**, сигнализирующая о выходе за границу диапазона.

Целочисленная отрицательная константа интерпретируется как функция исключения
элемента из списка. Аргумент – список любой размерности и любого типа элементов.
Результат – список, полученный из аргумента путём удаления из него элемента, чей
порядковый номер соответствует абсолютному значению аргумента. Если абсолютное
значение константы превышает длину списка, выдается ошибка **BOUNDERROR**,
сигнализирующая о выходе за границу диапазона.

Нулевое значение константы интерпретируется как функция, осуществляющая возврат
в качестве результата пустого значения, обозначаемого **"."**.

Примеры::

    (234, 56.75, F, 3.14):2 ⇒ 56.75
    (35, 23, 45, 76):[1, 3] ⇒ [35, 45]
    (10, 9, 23, 43, 22):-4 ⇒ (10, 9, 23, 22)
    (234, 56.75, F, 3.14):0 ⇒ .

Целочисленная константа в качестве аргумента имеет тип **int**.

Использование булевской константы
""""""""""""""""""""""""""""""""""

Булевские величины, при использовании в качестве функций, играют роль клапана.
Если значение селектора равно **true**, то аргумент выдается в качестве результата. При
значении равном **false** результатом является пустое значение. Подобная интерпретация
булевское величины позволяет в дальнейшем фильтровать результаты селекции с
использованием списка данных.

Примеры::

    (x, y):true ⇒ (x, y)
    (x, y):false ⇒ .
    t: true ⇒ t
    t:false ⇒ .
    (1:true, 2: false) ⇒ (1, .) ⇒ (1)
    (.):true ⇒ (.)
    .:true ⇒ .
    .:false ⇒ .

Булевская константа в качестве аргумента имеет тип **bool**.

Следует отметить, что предопределенное использование булевской константыкачестве селектора не позволяет непосредственно реализовать селекцию, аналогичную условному оператору. Однако существует несколько приемов, позволяющих решить эту задачу. Например, можно использовать дополнительные математические преобразованияцелое с вычитанием из двойки::

    (expr1,expr2):[(2,(x,0):=:int):-]

Другим возможным вариантов является использование альтернативных условий,
которые после синхронизации в списке данных порождают необходимое выражение,
раскрываемое преобразованием в параллельный список::

    (expr1:=,expr2:/=):[]


Функции, расширяющие возможности языка
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Слжение "**+**"
""""""""""""""""""""""""""""""

Интерпретация знака **"+"** в качестве функции зависит от типа аргумента. Если
аргумент является двухэлементным списком числовых атомов (целых или действительных),
то выполняется арифметическое сложение. При сложении двух целых чисел результат
всегда является целым числом. В этом случае автоматическое преобразование к
действительному числу не происходит даже при переполнении, а выдается соответствующая
ошибка. Во всех остальных случаях осуществляется сложение действительных чисел с
преобразованием, в случае необходимости, целочисленного операнда к действительному.
Результатом в этом случае является действительное число.

Если аргумент является числовым атомом, то он выдается в качестве результата без
каких-либо преобразований.

Аргумент функции **"+"** может также быть булевским списком длиной, равной 2. Результатом интерпретации в этом случае является дизъюнкция (логическое «или») всех элементов списка. Допускается одноэлементный булевский список или булевский атом, порождающий в качестве результата значение этого элемента. Во всех остальных случаях результатом является ошибка операции интерпретации **BASEFUNCERROR**.

Знак **"+"** в качестве аргумента имеет тип **spec**.

Примеры сложения::

    (3,5):+ ⇒ 8
    (3,5.0):+ ⇒ 8.0
    (5):+ ⇒ (BASEFUNCERROR, (5))
    5:+ ⇒ 5
    (max_integer,1):+ ⇒ (INTERROR, (max_integer,1))
    (true, false, true):+ ⇒ true
    true:+ ⇒ true
    false:+ ⇒ false
    (true):+ ⇒ true

.. note::

    *Возможно, имеет смысл использовать для булевских операций другой символ или идентификатор. Например, or или «!». Это относится и к операциям, описанным ниже.*

Использование знака "-"
""""""""""""""""""""""""

Интерпретация знака **"-"** в качестве функции зависит от типа аргумента. Если
аргумент является двухэлементным списком числовых атомов (целых или действительных),
то выполняется арифметическое вычитание. При вычитании двух целых чисел результат
всегда является целым числом. В этом случае автоматическое преобразование к
действительному числу не происходит даже при переполнении, а выдается соответствующая
ошибка. Во всех остальных случаях осуществляется вычитание действительных чисел с
преобразованием, в случае необходимости, целочисленного операнда к действительному.
Результатом в этом случае является действительное число.

Если аргумент является числовым атомом, то выполняется операция «унарный минус»,
изменяющая знак числа.

Аргумент функции **"-"** может также быть непустым булевским списком длиной
большей или равной 2. Результатом интерпретации в этом случае является «исключающее
или» (сложение по модулю два) всех элементов списка. Допускается одноэлементный
булевский список, возвращающий в качестве результата отрицание элемента. Если аргумент
– булевский атом, то результат данной операции равен отрицанию значения аргумента.
Во всех остальных случаях результатом является ошибка операции интерпретации **BASEFUNCERROR**.
Знак **"-"** в качестве аргумента имеет тип spec.

Примеры::

    (3,5):- ⇒ -2
    (3,5.0):- ⇒ -2.0
    (5):- ⇒ (BASEFUNCERROR, (5))
    5:- ⇒ -5
    (max_integer,-1):- ⇒ (INTERROR, (max_integer,-1))
    (true,false,true):- ⇒ false
    true:- ⇒ false
    false:- ⇒ true
    (true):- ⇒ false

.. note::

    *Возможно, имеет смысл использовать для булевских операций другой символ или идентификатор. Например, xor или «~».*

Использование знака "*"
""""""""""""""""""""""""

Аргумент функции **"*"** может быть двухэлементным списком числовых атомов (целых
или действительных), а знак **"*"** интерпретируется как арифметическое умножение. При
умножении двух целых чисел результат всегда является целым числом. В этом случае
автоматическое преобразование к действительному числу не происходит даже при
переполнении, а выдается соответствующая ошибка. Во всех остальных случаях
осуществляется умножение действительных чисел с преобразованием, в случае
необходимости, целочисленного операнда к действительному. Результатом в этом случае
является действительное число.

Аргумент функции **"*"** может также быть булевским списком длиной, большей или
равной 2. Результатом интерпретации в этом случае является конъюнкция (логическое «и»)
всех элементов списка. Допускается одноэлементный список, возвращающий в качестве
результата значение этого элемента. 

Если аргумент – булевский атом, то результат данной операции равен значению аргумента.

Во всех остальных случаях результатом является ошибка операции интерпретации BASEFUNCERROR.

Знак “*” в качестве аргумента имеет спецзнаковый тип.

Примеры::

    (3,5):* ⇒ 15
    13 из 22
    (3,5.0):* ⇒ 15.0
    (5):* ⇒ (BASEFUNCERROR, (5))
    5:* ⇒ (BASEFUNCERROR, 5)
    (max_integer, 2):* ⇒ INTERROR
    (true, false, true):* ⇒ false
    (true, true, true):* ⇒ true
    true:* ⇒ true
    (true):* ⇒ true

.. note::

    *Возможно, имеет смысл использовать для булевских операций другой символ или идентификатор. Например, and или «&».*

Использование знака "/"
""""""""""""""""""""""""

Аргумент функции должен быть двухэлементным списком числовых атомов (целых
или действительных), а знак **"/"** интерпретируется как арифметическое деление. При этом
результат всегда является действительным числом. При делении на ноль выдается ошибка ZERODIVIDE.
Во всех остальных случаях результатом является ошибка операции интерпретации (BASEFUNCERROR, (5)).

Знак “/” в качестве аргумента имеет тип spec.

Примеры деления::

    (3,5):/ ⇒ 0.66667
    (3,5.0):/ ⇒ 0.66667
    (5):/ ⇒ (BASEFUNCERROR, (5))
    5:/ ⇒ (BASEFUNCERROR, 5)

Использование знака "%"
""""""""""""""""""""""""

Аргумент должен быть двухэлементным списком целочисленных атомов, а знак **"%"**
интерпретируется как целочисленное деление с формированием частного и остатка.
Результатом данной операции явится двухэлементный список целых констант, первая из
которых является целым частным элементов аргумента, а вторая – остатком от деления.
Используется «компьютерная» интерпретация результатов, при которой частное округляется
к нулю, а знак остатка равен знаку делимого. Операции связаны между собой следующими
выражениями::

    x = (x DIV y) * y + (x MOD y)
    0 <= (x MOD y) < y, если x > 0 или
    0 >= (x MOD y) > y, если x < 0

При делении на ноль выдается ошибка ZERODIVIDE. Во всех остальных случаях
результатом является ошибка операции интерпретации BASEFUNCERROR.

Знак **"%"** в качестве аргумента имеет тип spec.

Примеры целочисленного деления::

    (13,5): % ⇒ (2, 3)
    (13,-5): % ⇒ (-2, 3)
    (-13,5): % ⇒ (-2, -3)
    (-13,-5): % ⇒ (2, -3)

Подобная трактовка отличается от математической, рассматриваемой, например в
первом томе книги Кнута [Кнут]::

    x = (x DIV y) * y + (x MOD y)
    0 <= (x MOD y) < y, если y > 0 или
    0 >= (x MOD y) > y, если y < 0

Кстати, Кнут и не называет операцию MOD остатком. Получить математические
версии функции, использую предопределенную операцию можно следующим образом::

    // функция целочисленного деления:
    div << funcdef x {
        dm<<x:%:1;
        [((dm,0):[>=,<]):?]^
        (
            dm,
            {(dm,1):-}
        ):. >>return
    }
    
    // функция выделения остатка от целочисленного деления:
    mod << funcdef x {
        dm<<x:%;
        [((dm:1,0):[>=,<]):?]^
        (
            dm:2,
            [((dm:2,0):[>=,<]):?]^
            (
                {(dm:2,1):-:-},
                {(dm:2,1):+:-}
            )
        ):. >>return
    }

Использование знаков: "=", "/=", "<", "<=", ">", ">="
""""""""""""""""""""""""""""""""""""""""""""""""""""""

Представленные знаки используются как функции сравнения аргументов, двухэлементного списка данных. Подобная интерпретация используется во многих языках программирования. Элементы списка должны быть сравнимы между собой. Если на множестве сравниваемых элементов определено отношение порядка, то могут использоваться любые функции. В противном случае допускается сравнение только на равенство (“=”) и неравенство (“!=”). Допускается сравнение между собой:

- Всех числовых данных (все операции);
- Символов (все операции);
- Булевских данных (все операции);
- Спецсимволов (на равенство и неравенство);
- Типов (на равенство и неравенство);
- Функций (на равенство и неравенство).

.. note::

    *Дальнейшие варианты предполагается уточнять в ходе последующих работ.*


Знаки "=", "!=", "<", "<=", ">", ">=" в качестве аргумента имеют тип **spec**.

Использование специальных функций
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Использование функции "dup"
""""""""""""""""""""""""""""

Функция обеспечивает создания списка из одинаковых элементов путем дублирования.
Аргумент – двухэлементный список, первый элемент которого – любая допустимая в языке
конструкция, а второй – положительнгая целочисленная константа. Результат – список, элементами которого являются копии первого элемента аргумента, а количество элементов результирующего
списка равно значению второго элемента аргумента.

Пример::

    (10, 5):dup ⇒ (10, 10, 10, 10, 10)

Функция **dup** в качестве аргумента имеет тип **func**.

.. note::

    *Скорее всего в новой версии данная функция будет возвращать параллельный список. Вполне возможно появятся константы, позволяющие компактно задать дубликат. Или в случае константного выражения возможно его развертывание во время компиляции.*

Использование предопределенных типов
-------------------------------------

Механизм работы с типами, используемый в настоящее время, является традиционным для языков с динамической типизацией. Все предопределенные данные имеют признак (тег), задающий их тип. Значение размещается либо непосредственно за тегом или расположено в памяти и доступно через указатель на некоторую область памяти. Любая операция перед выполнением анализирует теги аргументов и в соответствии с этим интерпретирует значение. Формально объект данных можно представить в виде двойки::

    Структура элемента = (тип, величина).

Наряду с обработкой данных, осуществляемой неявно, допускается выделять тип любого элемента данных. Для этого используется предопределенная операция type. Формируемая при этом величина принадлежит к «типовым» и имеет точно такую же организацию, как и любой другой аргумент. Ее специфика проявляется лишь в том, что типом аргумента является type.

    Структура типового элемента = (type, значение типа).

Имена предопределенных типов также могут использоваться интерпретироваться в
качестве функций и данных. Если имена типов используются в качестве данных, то в роли
функций могут выступать сравнения, что позволяет сравнивать типы различных объектов и
проверять принадлежность некоторого объекта заданному типу. Для выделения типа
объекта используется предопределенная функция type, аргументом которой является объект,
а результатом – значение его типа.

Например::

    10:type ⇒ int
    3.14:type ⇒ float
    (1, 2, (4, 7)) :type ⇒ datalist
    [1, 2, 3, (3, 4)] :type ⇒ [int, int, int, datalist]
    {x, y, z}:type ⇒ [int,int,int]

Функция **type** в качестве аргумента имеет тип **func**. Следует отметить, что данная функция не определяет тип для параллельных и задержанных списков.

Применение функции **type** к «типовому» элементу невозможно и ведет к ошибке интерпретации **TYPEERROR**, например::

    int : type ⇒ TYPEERROR

Использование предопределенных типов в качестве функций позволяет осуществлять
преобразование объектов.

Функция **int** осуществляет преобразование к целочисленной величине действительных
символьных и булевых значений. Если аргумент является символом, то в качестве
результата преобразования берется значения кода символа в соответствии с используемой
таблицей кодировки. Если же аргумент - булева величина, то значение **false** преобразуется в
0, а **true** - в 1. Действительные числа преобразуются с округлением в соответствии с
общепринятыми математическими правилами. При невозможности преобразования
действительных чисел к целым возвращается ошибка целочисленного переполнения.

.. note::

    *В существующей версии интерпретатора действительные числа не округляются, а просто берется целая часть. Надо исправить! Или привести в соответствие с C++ (может так и есть).*
    
    *Вместо ошибки для слишком больших чисел возвращается нулевое значение. Надо исправить!*

    *Преобразование русских букв осуществляется некорректно! Они становятся отрицательными числами. Необходимо исправить!*

Функция **float** (**real**) осуществляет аналогичные преобразования булевских, целых и
символьных величин к действительному значению.

Функция **char** обеспечивает перевод целых чисел в символы. Если значение целого
числа выходит за диапазон таблицы, то возвращается ошибка выхода за границы диапазона.

.. note::

    *Преобразование чисел осуществляется некорректно! Выход за границы диапазона не отлавливается. Допускаются отрицательные значения. В преобразовании участвуют и действительные числа. Необходимо исправить!*

Функция **bool** преобразует целые и действительные числа в булевское значение.
Значение **false** формируется при аргументе, равном нулю, а значение **true** - при любом
отличном от нуля входном значении.

.. note::

    *Осуществляется преобразование символов, что вряд ли имеет смысл. Необходимо исправить!*

Функция **datalist** является аналогом предопределенной функции **"( )"**.

Функция **parlist** является аналогом предопределенной функции **"[ ]"**.

Функция **delaylist** является аналогом предопределенной функции **"{}"**.

.. note::

    *delaylist, как и {}, отрабатывает некорректно. Необходимо разобраться с семантикой!*

Функция **signal** преобразует любой вычисленный объект в сигнал (пустое значение).

.. note::

    *Должно формироваться пустое значение. Необходимо исправить!*

Функция **error** в данной версии не интерпретируется.

Пользовательские типы
----------------------

Инструментальная поддержка механизма динамически порождаемых пользовательских типов позволяет создавать аналоги абстрактных типов данных. Для этого используется дополнительных конструкций:

1. определение пользовательского типа;
2. сравнения пользовательских типов на равенство и неравенство;
3. проверка на принадлежность некоторого значения величине, допустимой для заданного пользовательского типа;
4. преобразование в пользовательский тип;
5. разыменование пользовательского типа.

Определение пользовательского типа задается соответствующим предикатом, сопоставляющим проверяемый элемент некоторому выражению. Если результат проверки является истиной, то элемент принадлежит проверяемому типу. Предикат оформляетсявиде специальной функции **typedef**, возвращающей булевское значение. Ее обозначение регистрируется в таблице пользовательских типов.
В качестве примера можно рассмотреть, как задаются треугольник и круг::

    // Описание пользовательского типа, задающего треугольник как
    // трехэлементный целочисленный список
    Triangle << typedef X {
        [(((X:type,datalist):=,(X:|,3):=):*:int,1):+]^
        (
            false,
            {([(X:1:type,int),(X:2:type,int),(X:3:type,int)]:=):*}
        ):.
        >> return
    }
    
    // Описание пользовательского типа, задающего круг как
    // целочисленный атом
    Circle << typedef X
    typedef X {
        (X:type,int):= >> return;
    }

**Сравнение пользовательских типов** осуществляется точно также как и сравнение базовых
типов языка: выделяется тип элемента функцией **type**, проверяется совпадение имен
выделенного и проверяемого типа. Результат сравнения является истиной при совпадении
имен типов. Ниже приводится пример использования сравнения пользовательских типов для
описания типа обобщенной геометрической фигуры. ::

    // Описание фигуры, являющейся треугольником или кругом
    Figure << typedef X {
        // Аргумент - треугольник или круг
        X:type >> t;
        ([(t, Triangle), (t, Circle)]:=):+ >> return;
    };

**Проверка на принадлежность** позволяет выяснить возможность соответствия между
динамически формируемыми данными и **typedef**. Для этого используется функция **in**,
которая возвращает значение, полученное в результате выполнения предиката, заданного в
описании пользовательского типа. Принадлежность позволяет в дальнейшем осуществить
преобразование проверяемого аргумента в элемент пользовательского типа. Ниже
представлены примеры использования функции принадлежности::

    ((10,20,15),Triangle):in ⇒ true
    ((10,20,15),Circle):in ⇒ false
    (10,Circle):in ⇒ true

**Преобразование в пользовательский тип** используется для формирования требуемых
абстракций по принципу «обертки» преобразуемых данных. Является расширением
операции преобразования базовых типов. Суть заключается в получении нового значения
элемента, следующей структуры::

    Элемент пользовательского типа = (пользовательский тип, преобразуемый элемент).

Само преобразование задается указанием пользовательского типа в качестве функцииосуществляется в зависимости от значения аргумента:

1) если тип аргумента совпадает с типов в операции преобразования, то возвращается значение исходного аргумента;
2) преобразование осуществляется только в том случае, если проверка аргумента на принадлежность функцией **in**, осуществляемая неявно, дает «истину»;
3) во всех остальных случаях функция преобразования в пользовательский тип возвращает ошибку **TYPEERROR**.

Использование данной операции позволяет формировать необходимые абстракции при
выполнении программы::

    (10,20,15):Triangle ⇒ Треугольник со сторонами (10,20,15)

Описанная операция не обеспечивает автоматического преобразования пользовательских
типов друг в друга, даже если их значения принадлежать единому подмножеству. Данное
ограничение введено для более строгого контроля. Зачастую подобные преобразования
бывают необходимы. В этом случае можно воспользоваться разыменованием
пользовательского типа, заключающемся в выделении «обернутого» значение функцией
**value**. Данная функция «отбрасывает» пользовательский тип, тем самым «обезличивая»
преобразуемый элемент::

    (10,20,15):Triangle:value ⇒ (10,20,15)
    (10,20,15):Triangle:value:1:Circle ⇒ Круг радиусом 10

Попытка применить операцию разыменования к базовым типам ведет к генерации ошибки
**VALUEERROR**::

    10:value ⇒ VALUEERROR

Правила эквивалентных преобразований
--------------------------------------

Правила эквивалентных преобразований уже рассматривались при описании модели
вычислений. Ниже они сведены воедино с учетом дополнительно введенных конструкций.

Cлияние параллельных списков в списке данных::

    ([X1], [X2], ..., [Xn]) ≡ (X1, X2, ..., Xn) .

Эквивалентность параллельных списков набору их элементов::

    [x1, x2, ... xn] ≡ x1, x2, ... xn .

Интерпретация параллельных списков::

    [x1, ... xn]:[f1, ... fk] ≡
        ≡ x1:f1, ... x1:fk, ... xn:f1, ... xn:fk .

Как частные случаи можно рассмотреть ситуации, когда функция или аргумент являются атомами::

    [x1, x2,...xn]:f ≡ x1:f, x2:f, ... xn:f .

    x:[f1, f2,...fk] ≡ x:f1, x:f2, ... x:fk .

Эквивалентность многократно вложенных задержанных списков::

    {{ X }} ≡ { X } .

Эквивалентность формирования списков данных::

    X:(F) ≡ (X:F) .

При пустом списке данных в качестве функции имеем::

    X:(.) ≡ (X) .

Эквивалентность пустого элемента и пустого параллельного списка::

    . ≡ [.]≡ {.} .

Данное правило определяет размножение альтернативной части операции
интерпретации, если его аргумент и функция являются параллельными списками. В этом
случае альтернатива приписывается каждой созданной операции интерпретации::

    [x1,...xn]:[f1,...fk] else Z ≡
        ≡ [x1:f1 else Z,...x1:fk else Z,...
            ...xn:f1 else Z,...xn:fk else Z]

Если список данных содержит пустой элемент **"."**, то этот элемент исключается из
списка. При этом длина данного списка уменьшается на количество содержавшихся пустых
элементов.

Пример::

    (x1, x2, ., ., x3) ≡ (x1, x2, x3)

.. note::

    *В новой версии предполагается не убирать пустые элементы, планируется организовать на их основе событийную логику. Помимо этого планируется не раскрывать и параллельные списки. Для того, чтобы раскрыть параллельные списки или убрать пустые элементы, планируется использовать специальные фильтры.*


.. .. include:: References.rst

Сокращения
----------

**ФПП** - функционально-потоковое параллельное.

**ФППП** - функционально-потоковое параллельное программирование.

**ЯФППП** - язык функционально-потокового параллельного программирования.

