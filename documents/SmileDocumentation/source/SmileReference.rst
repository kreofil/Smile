.. |date| date:: %d.%m.%Y
.. |time| date:: %H:%M
.. |copy| unicode:: 0xA9 .. copyright sign

.. Текущая дата |date| и время |time|

.. meta::
   :description: Описание концепций, языковых и инструментальных средств функционально-потокового параллельного программирования.
   :keywords: парадигмы программирования, функционально-потоковое параллельное программирование

:Author:    Александр Легалов
:Email:     <legalov@mail.ru>
:Date:      |date|
:Version:   0.1

:Copyright: |copy| Допускается свободное использование с обязательной ссылкой на сайт автора: "Оригинальная версия размещена на сайте www.softcraft.ru".

.. .. sectnum::
    :start: 1

.. .. contents:: Содержание
    :depth: 3


==========================================================
  Язык программирования Smile. Предварительное описание
==========================================================

Общие соображения
-----------------------------------

.. note::

    *В рамках этого предварительного описания я хочу сформулировать свое видение языка функционально-потокового параллельного программирования Smile и инструментальных средств обеспечивающих его поддержку.*
    
    *Проектируемый язык, как и язык программирования Пифагор, базируется на функционально-потоковой модели параллельных вычислений. Также от Пифагора заимствуются особенности синтаксиса. Однако смена названия говорит о том, что в данном случае не планируется обеспечить обратную совместимость. Предполагается активно использовать статическую типизацию. Но при этом оставить (возможно) динамическую типизацию определяемую пользователем.*

    *Формируемый документ предназначен для всестороннего охвата как изменений, вносимых в первоначальную концепции языка функционально-потокового параллельного (ФПП) программирования, так и для объяснения причин, порождающих эти изменения. Поэтому  данный текст, наряду с конкретным описанием языка содержит множество дополнительных примечаний, поясняющих особенности как синтаксиса, так и семантики.*

    *Эти пояснения предполагается вносить как по ходу формирования текста документа, так и в ходе разработки компилятора языка ФПП программирования Smile.*

Введение
---------------

Статически типизированный язык функционально-потокового программирования Smile разрабатывается с учетом опыта, полученного при создания языка программирования Пифагор. Основным его отличием является использование статической системы типов, обеспечивающей более безопасное выполнение основных операций. Помимо этого предполагается, что должно улучшиться распределение памяти под данные, а также генерация кода в другие языки со статической типизацией, ориентированные на описание параллельных вычислений с использованием императивного или функционального программирования.

Опираясь на СТМФППВ разрабатываемый язык программирования включает дополнительные конструкции, расширяя функциональные возможности, описываемые моделью. Это обуславливается тем, что, в отличие от модели, язык программирования должен обеспечивать поддержку удобного и эффективного написания программ.

Используемый метаязык
------------------------

Для описания синтаксиса используются расширенные формы Бэкуса-Наура (**РБНФ**).
Квадратные скобки **"["** и **"]"** означают, что заключенная в них сентенциальная форма может отсутствовать, фигурные скобки **"{"** и **"}"** означают ее повторение (возможно, 0 раз), а круглые скобки **"("** и **")"** используются для ограничения альтернативных конструкций. Сочетание фигурных скобок и косой черты **"{/"** и **"/}"** используется для обозначения повторения один и более раз. Нетерминальные символы изображаются словами, выражающими их интуитивный смысл, написанными на русском языке и разделенными, при необходимости, знаком подчеркивания **"_"**. Каждое правило оканчивается точкой **"."**. Терминальные символы изображаются словами, написанными строчными буквами латинского алфавита (зарезервированные слова) или цепочками знаков, заключенными в кавычки. Левая часть правила отделяется от правой знаком **"="**.

Элементарные конструкции
--------------------------

Элементарные конструкции являются составными частями различных конструкций, образующих на верхнем уровне артефакты. К артефактам относятся сформированные программные объекты, обладающие определенной семантикой и используемые для описания как различных данных, так и функций.

Разделители
~~~~~~~~~~~~~~

Пробелы, символы табуляции, перевода на новую строку и перевода страницы
используются как разделители. Вместо одного из таких символов может использоваться
любое их количество. Все другие управляющие символы употреблять в тексте программы
запрещено.

Комментарии
~~~~~~~~~~~~~~~~~

Многострочные комментарии начинаются парой символов "**/\***" и заканчиваются
парой символов "**\*/**". Разрешены везде, где возможны разделители. Вложенность многострочных комментариев не допускается.

Примеры::

    /* Многострочный комментарий в одной строке */
    /*
     * Многострочный комментарий,
     * размещенный в нескольких строках
     */

В языке также допускаются однострочные комментарии. Они начинаются парой
символов **"//"** и заканчиваются признаком конца строки. Однострочные комментарии могут начинаться с самого начала строки или стоять после операторов, написанных в этой строке.

Пример::

    // Однострочный комментарий

**комментарий = "/*" {знак} "*/" | "//" {знак}.**

Идентификаторы
~~~~~~~~~~~~~~

Идентификаторы используются для обозначения имен констант, переменных,
функций и типов данных. Допустимые символы: цифры **0-9**, прописные и строчные буквы
латинского алфавита **A-Z**, **a-z**, символ подчеркивания **"_"**. Первый символ не является
цифрой. Идентификатор может быть произвольной длины. Прописные и строчные буквы
различаются.

**ид := (буква | "_"){буква|цифра|"_"}.**

Примеры::

    NAME1
    name1
    it_is_ID

Зарезервированные слова
~~~~~~~~~~~~~~~~~~~~~~~

Зарезервированные слова используются для ключевых слов встроенных типов данных,
предопределенных обозначений и функций. Ниже приведен общий их список::

    block       break       bool        char        const
    group       dup         delay       else        error
    false       float       func        funcdef     int
    nil         queue       return      signal      swarm 
    transform   true        type        vector

Зарезервированные слова записываются строчными буквами. Использовать их в качестве идентификаторов запрещено.

.. note::

    *В данной ситуации также стоит отметить, что типы данных должны быть вынесены в отдельную категорию предопределенных артефактов. Это  означает, что они не будут определяться через ключевые слова. То есть предполагается формирование данных артефактов в соответствующем пространстве имен, запрещающих их повторное использование в другом контексте. Но это будет описано позднее, когда устаканится их резервирование в данной роли.*

Специальные знаки
~~~~~~~~~~~~~~~~~~~~~~

**Специальные знаки** используются для обозначения различных понятий. Они могут являться разделителями, элементами программоформирующих операторов, обозначением констант данных и предопределенных функций. Их смысл будет раскрыт при описании языка.

**спецзнак =**

    **":" | "::" | "^" | "^^" | "+" | "-" | "/" | "*" | "%" | "/%"|**
    **"<" | ">" | "=" | ">=" | "<=" | "!=" | "=>" | "->" | "<-" |**
    **"()" | "{}" | "[]" | "|" | "#" | ".." | "?" | "??" | "!".**

Следует отметить, что ряд специальных знаков в настоящее время не используется и
зарезервирован для дальнейшего расширения языка.

.. note::

    *Перечисленный набор спецзнаков в дальнейшем может корректироваться. Также будет уточняться и их принадлежность к конкретному типу, что пока не описано. В целом предполагается, что большинство спецзнаков в контексте вычисления будут отображаться в функции. Вместе с тем, дуализм аргументов операции интерпретации может привести к тому, что ряд знаков будет интерпретироваться различным способом в зависимости от того, являются они данными или функциями в операторе интерпретации.*
    
    *Помимо этого, так как вводится две разновидности оператора интерпретации, для различных типов возможна разная трактовка в зависимости от этого.*

Обозначения
-----------

В языке, построенном на основе принципа единственного использования вычислительных ресурсов в сочетании с принципом единственного присваивания, отсутствует понятие переменной. Вместо него вводится понятие обозначения как идентификатора, поставленного в соответствие с каким-либо программным фрагментом. В пределах некоторой области видимости использование идентификатора в качестве обозначения должно быть уникальным. Обозначение получает тип и величину (значение) сопоставленного элемента и может использоваться для дальнейшей передачи этих параметров в любую точку программы, обеспечивая тем самым копирование артефакта, полученного в ходе вычислений. В языке определены два способа задания обозначений:

- префиксное, при котором знак идентификатор пишется слева от знака "<<", а определяемый артефакт справа;
- постфиксное, когда слева от знака ">>" задается определяемый артефакт, а справа его идентификатор.

**обозначение =**
    **идентификатор "<<" элемент |**
     **элемент ">>" идентификатор.**

Под элементом понимается любой из артефактов языка. Идентификатор элемента. Понятия
артефакта, выражения и блока будут даны ниже.

**элемент =**
    **артефакт | выражение | блок |**
     **обозначение | идентификатор.**

Примеры::

    X << 100;
    Pi << 3.1415;
    10 >> ten;
    (a, b):+ >> sum;
    x0 << y0 << 0;

.. note::

    *Следует отметить, что в данном языке все-таки появится присваивание, которое будет функционировать по принципу единственного присваивания. Это обусловлено тем, что при введении статической типизации появляются контейнерные артефакты заданной размерности, в которые можно вводить данные, руководствуясь этими размерами. Также возможно появление аналогов структур (записей), имеющих поля с локальным именованием. В этих случаях тоже удобнее заносить данные внутрь этих конструкций путем единственного присваивания. Это же касается обобщений. Но обозначение все равно остается и будет для таких артефактов использоваться как начальное объявление.*
    
Артефакты
-----------

К артефактам языка относятся программные объекты, определяемые в языке и несущие заданную семантическую нагрузку. Каждый артефакт характеризуется двойкой:

**<тип, значение>.**

В языке используется статическая типизация артефактов, что позволяет сформировать и идентифицировать тип любого из них во время компиляции. Значение определяет величину из множества допустимых значений, допустимых для данного типа.

.. note::

    *Наличие строгой статической типизации в целом не отменяет изменчивость типов. Любая маломальская программа требует в той или иной форме поддержки динамической типизации данных. Ее поздняя реализация в языке планируется через процедурно-параметрический полиморфизм. В первоначальной версии предполагается использование объединений в стиле языка программирования Ada.*

Артефакты могут формироваться как до выполнения программы, так и во время ее выполнения. Артефакт, сформированный до вычислений, является константой заранее предопределенного типа. Существуют различные по структуре категории артефактов, которые можно описать следующим правилом:

**артефакт_по_структуре = атом | составной | функция.**

Типы артефактов
~~~~~~~~~~~~~~~~~~~~~~~~~~

Можно выделить неупорядоченное множество предопределенных типов, задаваемых соответствующими именами. Типы делятся на атомарные и составные. Атомарные типы и области их допустимых значений определяются аксиоматически. Составные типы являются комбинацией атомарных и уже существующих составных артефактов. Они конструируются по заданным правилам. 

Следует отметить определенную специфику языка, вытекающую из особенностей модели вычислений. Она заключается в том, что многие артефакты могут использоваться в качестве как данных, так и функций оператора интерпретации. Это проявляется в дуализме артефактов, что ведет к двойственной трактовке типов в зависимости от использования. Поэтому артефакт по типу можно охарактеризовать следующим правилом:

    **артефакт_по_типу = данные | функция | дуальный.**

Учитывая тип артефакта в зависимости от применения, его можно охарактеризовать следующей конструкцией:

**<тип-данные:тип-функция, значение>**.

Двоеточие разделяющее значение типов, показывает их местоположение относительно постфиксного оператора интерпретации. В качестве примера можно привести целые числа. Как данные они используются в диапазоне от минимального до максимального целого и имеют тип **int**. В качестве функции они используются как селекторы данных из контейнерных типов. При этом их тип интерпретируется как **func**. Поэтому описание целых чисел выглядит следующим образом:

**<int:func, MinInt...MaxInt >**.

Также следует отметить, что имеющаяся возможность перегрузки имени функции за счет использования идентификации по сигнатуре позволяет связывать с одним артефактов несколько функциональных типов.

.. table:: **Предопределенные артефакты**

    ======================== ================= ============
    Название артефакта       Обозначение типа  Организация 
    ======================== ================= ============
    **сигнал**               signal:func       атом        
    **логический**           bool:func         атом        
    **целый**                int:func          атом        
    **вектор**               vector:func       составной   
    **кортеж**               tuple:func        составной   
    **структура**            struct:none       составной   
    **обобщение**            union:none        составной   
    **рой**                  swarm:func        составной   
    **задержка**             none:none         составной   
    **функция**              none:func         составной   
    **ошибка**               error:none        атом        
    **очередь**              queue:func        составной   
    **типовой**              type:func         перечислимый
    *действительный*         float:none        атом        
    *символьный*             char:none         атом        
    ======================== ================= ============

.. note::

    *В текущей версии действительный и символьный тип реализовывать не планируется. Это связано с тем, что первоначально предполагается отработать ключевые конструкции языка, после чего можно переходить к его дальнейшему расширению.*

Константы
-----------------------------

Константы относятся к неделимым атомарным величинам, принимающим конкретные значения, соответствующего предопределенному для них типу данных. Значение константы принадлежит области ее допустимых значений, задаваемой в зависимости от типа одним из следующих способов: диапазоном, диапазоном и точностью, перечислением элементов упорядоченного множества, перечислением элементов неупорядоченного множества (если нет необходимости устанавливать между элементами отношение порядка), функцией. Каждая константа - это одно значение из диапазона, определяемого областью допустимых значений. В языке реализованы следующие виды констант:

    * сигнальная константа;
    * целочисленные константы
    * булевские константы;
    * константы ошибок;
    * специальные константы.
    
Тип константы в программе определяется ее внешним видом, задаваемым синтаксическими правилами:

**константа = сигнальная | целая | логическая.**

Семантика констант, связана с семантикой их величин, ролью в операторе интерпретации и приводится в описании оператора интерпретации.

Сигнальная константа
~~~~~~~~~~~~~~~~~~~~~

**Сигнальная константа** или просто **сигнал** имеет предопределенный тип **signal** и может принимать только одно значение **!**, указывающее на произошедшее событие, не связанное с другими типами данных. Кроме фиксации факта возникновения некоторого события сигнал больше не содержит никакой дополнительной информации.

Целая константа
~~~~~~~~~~~~~~~

**Целая константа** имеет предопределенный тип данных **int** и используется для представления данных в формате стандартного машинного слова, длина которого зависит от архитектуры ВС. 

.. note::

    *В текущей версии языка реализовано представление целых чисел только в десятичной системе счисления. Это достаточно для проведения первоначальных экспериментов.*

**целая = [ "+" | "-" ] {/цифра/}.**

**цифра = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9".**

Примеры::

    127
    0127
    -356
    +10

Предполагается, что в соответствии с внутренним машинным представлением целочисленные константы располагаются в диапазоне **{MinInt, ..., MaxInt}**.

Например для 64-разрядной архитектуры в дополнительном коде это будет диапазон 
от -2\ :sup:`64` до 2\ :sup:`64` - 1. 

Логическая константа
~~~~~~~~~~~~~~~~~~~~

**Логическая константа** имеет предопределенный тип **bool** и может принимать значения "**true**" ("истина") или  "**false**" ("ложь"). Она задается соответствующими ключевыми словами.

**логическая = true | false.**

Для логических констант сохраняется отношение порядка:

**false < true.**

Логическая константа имеет предопределенный тип данных **bool**

.. note::

  При описании констант это несущественно, но в дальнейшем следует зафиксировать то, что значение **false** кодируется нулем (0), а значение **true** кодируется единицей (1). Целочисленные значения вместо ключевых слов могут использоваться в качестве аргументов там, где четко определен тип данных **bool**.

Константы ошибок
~~~~~~~~~~~~~~~~

**Константы ошибок** имеют тип **error**. Они используются для отображения некорректных ситуаций, возникающих в ходе вычислений. Величины этого типа могут обрабатываться наряду с другими данными или как исключительные ситуации.

Область допустимых значений для констант ошибки задается неупорядоченным множеством, которое в дальнейшем предполагается пополнять. В настоящий момент выделяются следующие ошибки:

- **ERROR** - неидентифицируемая ошибка;
- **REALERROR** - некорректное преобразование действительного числа;
- **INTERROR** - некорректное преобразование целого числа;
- **ZERODIVIDE** - деление на ноль;
- **INTERPRERROR** - ошибка операции интерпретации;
- **BOUNDERROR** - ошибка выхода за границы диапазона;
- **BASEFUNCERROR** – неправильное использование предопределенной функции.
- **NOERROR** - отсутствие ошибки

Эти имена запрещается использовать в программе в другом контексте.

**константа_ошибки = ERROR | FLOATERROR | INTERROR | ZERODIVIDE |**
    **| INTERPRERROR | BOUNDERROR | BASEFUNCERROR | NOERROR.**

Значение **NOERROR** формируется в том случае, если при получении  результата вычислений необходимо вместо конкретного значения ошибки вернуть информацию о том, что ошибка отсутствует.

.. note::

    *Предполагается, что по сравнению с Пифагором использование ошибок будет значительно переработано в сторону упрощения. Планируется, что каждая из констант ошибки будет являться отдельной функцией - обработчиком ошибки, предоставляющей информацию о типе ошибке и обеспечивающей обращение к системе для корректного завершения программы. На данном этапе не планируется введение системы обработки исключений. Хотя в дальнейшем такое развитие просматривается.*
    
    *Возможно, что реализация обработки ошибок будет сделана по аналогии с тем, как это реализовано в языке программирования GO. То есть, вместо выбрасывания исключений, будет формироваться значение, возвращаемое в качестве одного из результатов.*

Описание именованных констант
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Для любой из представленных выше констант можно ввести обозначение в виде имени. Это позволяет в разных местах программы ссылаться на одну и ту же константу. Описание именованных констант задается следующим синтаксическим правилом:

**описание_константы = имя_константы "<<" ["const"] константа |**

                    **["const"] константа ">>" имя_константы.**

Ключевое слово ``const`` не является обязательным, так как и без его использования описание задается однозначно.

Примеры::

    ten << 10
    const 5 >> five
    one << const 1
    3.141592 >> pi
    ok << true
    fail >> false

Описания типов
-----------------------------

Язык ориентирован на использование статической системы типов. Предполагается что каждый объявляемый тип должен иметь имя. Существуют предопределенные (базовые) типы и сконструированные типы (типы, определяемые пользователями). Среди предопределенных можно выделить атомарные и составные типы.

Описания позволяют создавать новые именованные типы, определяя их через предопределенные типы или используя уже сконструированные типы. Имя вновь создаваемого типа задается идентификатором, который используется в качестве обозначения. После обозначения следует описание, которое начинается с ключевого слова **type** или эквивалентного по ему по смыслу специального обозначения типа **@**:

**ОписаниеТипа = ИмяНовогоТипа "<<" ("@" | "type") Тип |**

                    **("@" | "type") Тип ">>" ИмяНовогоТипа.**

.. note::

    *Двоякое толкование начала описания в данный момент вызвано неопределенностью ответа на вопрос: какое обозначение типа лучше? С одной стороны собака "@" везде трактуется как обозначение типа. И запись при этом получается компактной. С другой стороны в языках принято ставить ключевое слово type. Решил использовать оба, пока не принято окончательное решение*

Переименование типа
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Основная идея использования переименования типов заключается в создании новых типов на основе уже существующих. При этом новые типы напрямую не наследуют свойства уже созданных типов. В отличие от алиасов (псевдонимов, определяющих дополнительные имена для того же типа) все функции исходного типа над вновь созданным напрямую недоступны. Использовать функции, родительского типа их можно только после явного приведения созданного типа к типу предшественника. Например, допускается использование предопределенных атомарных типов, имеющих имя, для построения новых типов. Например::

    apple << @ int

Ключевым здесь является следующий принцип: если хочется использовать новый именованный тип, то для обработки его нужно сформировать свой набор функций, а не использовать неявно функции родительского типа. В противном случае незачем формировать новый тип, а достаточно использовать уже существующий. Использование общих функций для нескольких типов можно реализовать, используя обобщения.

.. note::

    *Это во многом противоречит общепринятой трактовке переименования типа, когда новое имя используется как алиас старого с сохранением всей семантики. Зачастую это бывает полезным для создания нужной ориентации на предметную область минимальными усилиями. Однако можно подумать в дальнейшем над тем, чтобы прямое соответствие сформировать явно за счет дополнительных опций, когда это нужно. Или более экономными средствами сформировать ограниченное соответствие.*
    
Конструирование типа
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Создание новых типов на основе составных предопределенных типов обеспечивает формирование именованных абстрактных типов данных с требуемыми полями и свойствами. Эти типы могут создаваться на основе любых составных типов и использоваться в различных манипуляциях, допускаемых над величинами, имеющими тип в которых тип яаляется также и значением (вид типа).

.. note::

    *Что-то подобное можно заимствовать из Хаскела.*
    
    *В данной версии языка предполагается, что будет использоваться только (или в основном) именованная эквивалентность типов. То есть, два типа будут считаться эквивалентными, если они имеют одинаковые имена. Это, на мой взгляд, обеспечит более строгий контроль типов и позволит проводить формальную верификацию программ в более широком диапазоне. Поэтому, в большинстве случаев перед сравнением типов необходимо будет осуществлять явное преобразование к нужному типу, если такое возможно в соответствии с используемым механизмом преобразования (приведения) типов. Но без структурной эквивалентности в ряде случаев просто не обойтись. Поэтому данный вопрос требует детальной проработки...*
    
    *Структурная эквивалентность будет использоваться при сопоставлении предопределенных составных типов. В этом случае возможна проверка на идентичность имен предопределенных типов, после чего следует проверка идентичности внутренней структуры. Но при этом предполагается, если возможно, явное приведение сопоставляемых типов к единому предопределенному составному типу.*

Предопределенные атомарные типы
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

К атомарным относятся следующие предопределенные типы:

    * сигнальный тип (**signal**);
    * булевский тип (**bool**);
    * целый тип (**int**);
    * ошибочный тип (**error**);
    * пустой (незаданный) тип (**empty**);

**атомарный_тип = сигнальный | булевский | целый | функциональный |**

                  **ошибочный| пустой.**

**сигнальный = "signal".**

**булевский = "bool".**

**целый = "int".**

**пустой = "empty".**

Сигнальный тип
"""""""""""""""""""""""""""""""""""""""""""""

**Сигнальный тип** (или просто **сигнал**) обозначается ключевым словом "**signal**". Он отличается от других атомарных типов тем, что не имеет конкретного значения и в динамике определяется только фактом своего появления. Для того, чтобы показать наличие сигнала, используется константа **"!"**. То есть, можно говорить о том, что сигнальный тип определяется только одним значением. Готовность величины сигнального типа определяется самим фактом появления атома. 

Появление  сигнала качестве результата непосредственно определяет факт срабатывания соответствующего оператора интерпретации. Использование сигналов позволяет, при необходимости, моделировать в функциональных программах явное управление вычислениями. Они также могут сигнализировать о завершении работы функции, не возвращающей значимый результат.

Любая функция, не имеющая аргументов, может быть запущена только при наличии сигнала в качестве аргумента операции интерпретации. Постоянно присутствие сигнала, определяющее
"моментальный" запуск, задается следующим выражением::

    !:F

Формат величины, определяющий внутреннее строение сигнала:

**<signal:func, { ! }>.**

По сути данные любого типа содержат сигнал, информирующий об их появлении. Отличие заключается в том, что все прочие типы данных имеют множество допустимых значений мощность которого больше единицы.

Булевский тип
"""""""""""""""""""""""""""""""""""""""""""""

**Булевский тип** обозначается ключевым словом "**bool**". Данные булевского типа принимают значения из множества булевских констант (**true**, **false**), мощность которого равна двум.

Формат величины, определяющий внутреннее строение булевской величины:

**<bool:func, {false, true}>.**

Целый тип
"""""""""""""""""""""""""""""""""""""""""""""

**Целый тип** обозначается ключевым словом "**int**". Данные целого типа принимают значения из множества целочисленных констант, мощность которого определяется реализацией целых чисел в конкретной компьютерной архитектуре.

Формат величины, определяющий внутреннее строение целочисленной величины:

**<int:func, {MinInt, ..., MaxInt}>.**

Ошибочный тип
"""""""""""""""""""""""""""""""""""""""""""""

**Ошибочный тип** обозначается ключевым словом "**error**". Данные ошибочного типа принимают значения из множества констант ошибок, которое задается путем перечисления видов ошибок, возможных в ходе выполнения функционально-потоковых параллельных программ. Данное множество может изменяться в ходе разработки системы функционально-потокового параллельного программирования. Однако при этом не предполагается, что пользователи могу  самостоятельно расширять данное множество, что и позволяет отнести его к классу атомарных типов. Данный тип не может использоваться в качестве функции.

Формат величины, определяющий внутреннее строение величины, задающей ошибку:

**<error:empty, {Множество значений констант, описывающих ошибки}>.**

.. note::

    *Следует отметить, что на текущий момент множество атомарных типов не включает ряд типов, которые традиционно присутствуют практически во всех других языках программирования. В частности, отсутствует тип, задающий числа с плавающей точкой. Предполагается, что ядро языка не будет ориентировано на типы данных, связанные с конкретными прикладными вычислениями. Также в нем будут отсутствовать функции, ориентированные на обработку этих типов. Добавление новых типов и функций планируется рассматривать как расширение ядра языка (Праязыка, Надязыка). При этом возможны различные варианты расширений, которые будут определять семейства проблемно-ориентировнных дочерних языков (языков - потомков), предназначенных для соответствующих предметных областей и параллельных вычислителей (в основном речь идет об ориентации на различные параллельные вычислительные архитектуры).*

Пустой тип
"""""""""""""""""""""""""""""""""""""""""""""

Понятие пустого типа вводится для обозначения того, что некоторая величина в одном из своих контекстов (данных или функции) не имеет конкретно заданного типа. То есть, она не относится ни к одному из предопределенных типов. Этот тип назначается тогда, когда не имеет смысла придумывать какой-то иной тип для обозначения группы значений. Например, множество знаков, используемых для задания функций сравнения не имеет смысла использовать как некоторой специализированной группы данных в предопределенном контексте:

**<empty:func, { <, <=, =, !=, >, >=}>**

Также данный тип не допускается использовать для конструирования других типов, так как он не несет требуемого для этого семантического смысла.

Составные типы
~~~~~~~~~~~~~~~~~~~

**Составные типы** могут расширяться за счет атомарных типов, составных типов и сконструированных типов. Они группируют используемые типы в контейнеры или другие конструкции, обладающие определенными свойствами, что, в свою очередь, определяет семантику их использования в операторе интерпретации. К составным типам языка относятся:

    * типовой тип (**type**);
    * вектор (**vector**);
    * *массив (?) (array);*
    * структура (**struct**);
    * кортеж (**tuple**);
    * обобщение (**union**);
    * любой (выводимый) тип (**any**);
    * рой (**swarm**);
    * очередь (**queue**);
    * функциональный тип (**func**);
    * ссылка (**ref**).

.. note::

    *Использование статической типизации в целом значительно изменяет семантику языка. Затрагивает она и синтаксис. При формировании данного описания пока не делается разделение между моделью и языком. Это планируется сформировать позднее, осуществив необходимые переносы текста.*

Типовой тип
"""""""""""""""""""""""""""""""""""""""""""""

**Типовой тип (вид типа)** обозначается ключевым словом **type** или символом **"@"**. Данные этого типа принимают значения из множества имен предопределенных типов и типов, созданных пользователем и используемых в текущей программе. По сути это некоторый перечислимый тип, значения которого расширяются по мере порождения пользователем новых именованных типов, определяемых через описания типов. Это расширение и позволяет относить данный тип к составным.

**типовой = "type" | "@".**

.. note::

    *Предполагается, что на текущем этапе данный тип реализовываться не будет информация о нем оставлена, чтобы не забыть обдумать его в дальнейших исследованиях.*
    
    *Скорее всего этот тип может стать интересным, если в язык добавить вывод типов.*

Формат величины, определяющий внутреннее представление типового типа:

**<data_type:func, {Множестов имен предопределенных и сконструированных типов}>.**

Тип Вектор
"""""""""""""""""""""""""""""""""""""""""""""

Тип **Вектор** (векторный тип) обозначается ключевым словом **vector**. Он обеспечивает группировку данных одного типа в вектор, готовность которого к выполнению определяется при поступлении всех его элементов. Возможно формирование статических и динамических векторов. Длина статически определяемого вектора задается константным выражением, значение которого должно быть положительной целочисленной величиной вычисляемой во время компиляции. Длина динамически порождаемого вектора вычисляется во время выполнения программы, но до начала его использования. Ее значение тоже должно являться целым числом.

Элементы вектора задаются в виде списка значений, заключенных в круглые скобки:

    (элемент\ :sub:`0`, элемент\ :sub:`2`, ... элемент\ :sub:`N-1`)

.. note::

    *Принято решение начать нумерацию элементов не с 1, а с 0, что сейчас принято во большинстве языков программирования. Оно обусловлено тем, что убраны отрицательные значения индексов, используемых в качестве функций, которые убирают соответствующий номеру элемент из вектора. Исчезновение этих функций связано с тем, что при их использовании возвращается результат другого типа, отличающегося от типа элемента.*

Нумерация элементов, размещенных внутри вектора, начинается с нуля. Число N в данном случае определят длину вектора. Описание векторного типа задает для типа имя, определяемое пользователем. Это описание всегда требует указание длины вектора целочисленным константным выражением и задается с использованием следующего синтаксиса:

**вектор = ["vector"] имя_типа "(" длина ")".**

**длина = ЦелочисленноеКонстантноеВыражение | ЦелочисленноеВыражение.**

Примеры описания векторных типов::

    A << @ int(100)             // Целочисленный вектор типа А
    B << @ vector bool(30)      // Булевский вектор типа А

Ключевое слово **vector** в описании типа является необязательным. Оно также может использоваться при проверке типа, а также в качестве имени функции при выполнении оператора интерпретации.

Значения векторов записываются в круглых скобках аналогично тому, как записываются и значения кортежей. Поэтому обычная запись::

    (1, 3, 2, 10, 6)

является кортежом длиной, равной 5, несмотря на то, что все элементы имеют одинаковыйх тип. Для описания векторов необходимо явно задать тип или сделать приведение кортежа к векторному типу. Например::

    vector(1, 3, 2, 10, 6)
    (1, 3, 2, 10, 6):vector

.. note::

    *Следует отметить, что одной из идей является использование многомерных массивов, задаваемых с использованием ключевого слова* **array**. *Это расширяет параллелизм на многомерные конструкции. Возможное их описание может быть представлено следующим синтаксисом:*
    
    **Массив = ИмяТипа "(" Размерность ")".**

    **Размерность = (ЦелочисленноеКонстантноеВыражение | ЦелочисленноеВыражение)**
            **{ "," (ЦелочисленноеКонстантноеВыражение | ЦелочисленноеВыражение) }.**

    *Примеры массивов*::
    
        AA << @ int(100, 100)
        BB << @ bool(30, 40)
    
    *Однако пока мне непонятно, каким образом лучше реализовать массивы. Прямое решение не выглядит достаточно эффективным из-за проблем с использованием многоразмерных индексных выражений. В дальнейшем, как вариант, предполагается рассмотреть реализацию массивов в виде расширения векторов. То есть в виде некоторой оболочки, которая добавляет индексы к вектору. Тогда для выбора любого элемента массива планируется преобразование его индексов к индексу вектора путем специальной операции* **index**. *Например:* `A:index^(i,j,k)`. *Этот вариант видится мне более предпочтительным. Несмотря на то, что вектор уже не будет частным случаем массива, данный вариант позволяет рассматривать приведение массива к вектору и вектора к массиву...*
    
    *На данном этапе реализацию многомерных массивов реализовывать не планируется.*

Тип Структура
"""""""""""""""""""""""""""""""""""""""""""""

Тип **Структура** (структурный тип) обеспечивает группировку разнотипных данных по аналогии со структурными типами различных языков программирования. Структура состоит из полей, каждое из которых имеет имя и тип. Описание структуры имеет следующий синтаксис:

**Структура = ["struct"] "(" ПолеСтруктуры { "," ПолеСтруктуры } ")".**

**ПолеСтруктуры = ИмяПоля "@" ИмяТипа**
        **| "[" ИмяПоля { "," ИмяПоля } "]" "@" ИмяТипа.**

Примеры структурных типов::

    Triangle << @ (a@int, b @ int, c @int)
    Rectangle << @ ([x, y]@int)

Ключевое слово **struct**  не является обязательным в описании структуры. Оно также может использоваться при проверке типа, а также в качестве имени функции при выполнении оператора интерпретации.

Тип Кортеж
"""""""""""""""""""""""""""""""""""""""""""""

Тип **Кортеж**, как и структура, предназначен для группирования неоднородных данных. Он отличается от структуры отсутствием именованных полей. По сути он похож на вектор, но может содержать разнотипные элементы. Обращение к элементам кортежа осуществляется по номеру поля (поля, как и в векторе, нумеруются, начиная с единицы). Для задания кортежей используется следующий синтаксис:

    **кортеж = ["tuple"] "(" ИмяТипа ["(" Множитель")"]**
    
                **{ "," ИмяТипа } ["(" Множитель")"]")".**
    
    **Множитель = Целое.**
    
Множитель позволяет задать коэффициент повторения для типа, который повторяется несколько раз подряд. Это целое положительное число.

Примеры задания типов кортежей::

    С << @ (int)
    В << @ (int, bool, signal)
    D << @ (int(5), bool(3), signal(7))

Ключевое слово **tuple**  не является обязательным в описании кортежа. Оно также может использоваться при проверке типа, а также в качестве имени функции при выполнении оператора интерпретации. Возможно явное преобразование структур в кортеж, что обуславливается эквивалентностью представления типов данных внутри структур и кортежей. Помимо этого возможно явное приведение к типу кортеж векторов. Обратное приведение допустимо, если все элементы кортежа  имеют один тип. Допускается также явное приведение кортежей к именованным структурам, типы элементов которых попарно совпадают с типами элементов кортежа.

    
Тип Обобщение
"""""""""""""""""""""""""""""""""""""""""""""

Тип **Обобщение** (обобщающий тип) во многом аналогичен по организации и использованию обобщениям, используемым в других языках. Основной его задачей является объединение воедино взаимоисключающих артефактов. Существуют различные подходы к организации обобщений, включая методы, поддерживающие полиморфизм. В языке предполагается использование процедурно-параметрических обобщений, обеспечивающих более гибкую поддержку эволюционного расширения программ по сравнению с другими подходами. Правила, определяющие синтаксис обобщений имеют следующий вид:

**Обобщение = ["union"] "{" ПолеОбобщения { "," ПолеОбобщения } "}"**

**ПолеОбобщения = ИмяТипа { "," ИмяТипа }**
                **| ИмяПризнака "@" ИмяТипа**
                **| "[" ИмяПризнака { "," ИмяПризнака } "]" "@" ИмяТипа**

Ключевое слово **union**  не является обязательным в описании обобщения. Оно также может использоваться при проверке типа, а также в качестве имени функции при выполнении оператора интерпретации. 

Примеры описания обобщений::

    Figure1 << @ {Triangle, Rectangle}
    Figure2 << @ {trian@Triangle, 
                    rect@Rectangle, 
                    rhomb@Rectangle}
    WeekDay << @ {[Sun,Mon,Tue,Wen,Thu,Fri,Sat]@signal}

.. note::

    *Пока вопрос с обобщением и их использованием рассматривается на уровне мономорфизма. То есть, предполагается явный анализ признаков обобщения, аналогичный тому, как это делается с объединениями в Си и вариантными записями в Паскале. Применение процедурно-параметрического полиморфизма или других вариантов планируется только в следующих версиях.*

Следует также отметить наличие в языке глобального обобщения, которое может объединять в единую конструкцию любые именованные типы данных. В этом случае обобщение  обеспечивает поддержку в языке динамической типизации и по сути является аналогом вариантных данных различных языков. Допускает приведение произвольных значений к данному типу с последующим возможным анализом имени типа полученного значения и соответствующим его выделением для выполнения необходимых операций.

.. note::

    *С другой стороны этот тип может рассматриваться как процедурно-параметрическое обобщение общего вида, формируемое автоматически сборкой имен типов в качестве признаков. То есть, можно будет создавать обработчики обобщений с использованием в качестве обобщающих аргументов тип* **any**.
    
    *Пока я обозначил этот тип. Более конкретный его анализ, включая полноту операций, планируется провести позднее. Также пока непонятно, стоит ли вообще вводить этот тип. Возможно, что он может оказаться полезным, когда будет рассматриваться добавление вывода типов с неопределенными атрибутами во время компиляции.*

Глобальные обобщения относятся к типу **union**. Формируемые именованные параметрические обобщения имеют тип, соответствующий заданным именам типов.

Любой тип
"""""""""""""""""""""""""""""""""""""""""""""

**Любой тип** обозначается ключевым словом **any**. По сути это не обозначение конкретно типа, а понятие, показывающее, что в данном месте программы может находиться любой именованный тип, описанный в программе. В ходе компиляции программы вместо **any** осуществляется подстановка конкретного типа, выводимого из контекста. То есть, данное понятие используется системой вывода типов. В основном **any** используется в прототипах функций для описания типов, которые могут принимать различные значения, включая и пустой тип. Основная задача данного понятия заключается в обеспечении системы вывода типов. Также используется при описания прототипов в документации для того, чтобы показать наличие на данном месте любого конкретного типа.

Тип Рой
"""""""""""""""""""""""""""""""""""""""""""""

Тип **Рой** (роевой тип) используется для описание независимых данных, над которыми возможно выполнение массовых параллельных операций. Обозначается ключевым словом **swarm**. Все элементы роя имеют один тип, а функция, осуществляющая их обработку, может одновременно выполняться над каждым элементом. Результатом является также рой, размерность которого равна размерности роя аргументов. Синтаксические правила, определяющие данный тип, имеют следующий вид:

**Рой = ["swarm"] ИмяТипа "[" Целое "]".**

Ключевое слово **swarm**  не является обязательным в описании роя. Оно также может использоваться при проверке типа, а также в качестве имени функции при выполнении оператора интерпретации. 

Пример описания типа::

    R << @ int[100]

Рой обеспечивает группировку данных одного типа в вектор, готовность которого к выполнению определяется при поступлении любого его элементов. В отличие от вектора оператор интерпретации начинает реагировать на поступление в рой каждого элемента вместо ожидания момента, когда данные полностью сформируются. Это может обеспечить запуск и частичное выполнение функции, обрабатывающий рой до того момента, когда будут готов все его данные.

Возможно формирование роев фиксированной и переменной размерности, каждый из которых обладает своими свойствами и может обрабатываться своим множеством функций. Множества функций для обработки разных видов роев пересекаются, но не перекрываются. Элементы роя задаются в виде списка значений, заключенных в квадратные скобки:

    [элемент\ :sub:`0`, элемент\ :sub:`2`, ... элемент\ :sub:`N-1`]

Нумерация элементов, размещенных внутри роя, начинается с нуля. Число N в данном случае определят размер роя. Размер роя может быть задан константным выражением при описании его типа в том случае, если объявляется рой с фиксированной размерностью.

.. note::

    *Как и для вектора пока предлагается только одномерное решение. Хотя есть соблазн разобраться и с реализацией многомерных роев. Но пока данный вопрос остается нерешенным.*
    
Тип Очередь
"""""""""""""""""""""""""""""""""""""""""""""

Тип **Очередь** является альтернативой асинхронному списку языка программирования Пифагор. Он используется для обработки данных поступающих асинхронно в произвольные промежутки времени. Количество поступающих данных при этом неизвестно, поэтому завершение обработки возможно только по признаку конца поступления данных. Очередь готова к обработке при наличии в ней хотя бы одного элемента. Тип всех элементов осереди одинаков. Синтаксические правила, определяющие очередь:

**очередь = ["queue"] ИмяТипа "{" "}".**

Ключевое слово **queue**  не является обязательным в описании очереди. Оно может использоваться при проверке типа, а также в качестве имени функции при выполнении оператора интерпретации. 

Пример описания типа Очередь::

    A << @ int{}
    B << @ queue bool{}

Функциональный тип
"""""""""""""""""""""""""""""""""""""""""""""

Тип **Функция** (или **функциональный тип**) обозначается ключевым словом **func**. Позволяет обозначить сигнатуру функции, определяя тип аргумента и тип результата. В целом определение функционального типа отличается от общепринятых во многих других языках программирования только тем, что функция имеет только один аргумент и возвращает только один результат. Синтаксические правила, определяющие описание функционального типа:

**ФункциональныйТип = ("func" | "\") Аргумент "->" Результат**

**Аргумент = ИмяТипа | КортежТипов**

**Результат = ИмяТипа | КортежТипов**

**КортежТипов = "(" ИмяТипа "," { ИмяТипа } ")"**

Примеры описаний::

    F << @ func int -> int
    F2 << @ func (bool, int, int) -> (int, bool)
    F3 << @\int -> int

.. note::

    *Принято решение о возможном использовании знака ``\\`` в качестве альтернативы ключевому слову ``func``. Это достаточно субъективное решение. Оно навеяно описанием лямбда фукнций в Хаскеле. Но ничто не мешает его использованию и здесь. Тем более, что представленный тип описания, как и описание самих функций с этим знаком синтаксически ничему не противоречат. Эти же альтернативные обозначения можно будет использовать и при задании лямда функций, если они появятся в языке (когда-то появятся...).*

С каждым функциональным типом связываются тип аргумента, обрабатываемого функцией, и тип формируемого результата, образуя сигнатуру функции. Сигнатура определяет принадлежность всех функций к одному типу. При этом любая функция, соответствующая данной сигнатуре, может восприниматься как некоторая величина, областью допустимых значений (ОДЗ) которой является совокупность ОДЗ ее аргумента и результата, что как раз и задается функциональным типом.

.. note::

    *Возможны в перспективе варианты, когда функция возвращает вектор, массив, рой или очередь. Но пока так глубоко копать не буду...*
    
    *Интерес также представляет задание структуры в качестве типа. Но в данной ситуации предполагается, что использование кортежа обеспечивает структурную эквивалентность и позволяет в дальнейшем подставлять любые структурно эквивалентные типы...*
    
    **Нужно по тексту четко отделить прототип от сигнатуры. Пока это не сделано.**
    
Следует отметить, что наряду с сигнатурой используется поняте прототипа функции, которое включает имя функции, тип аргумента и тип результата. Данное понятие полезно при описании перегрузки функций, заключающейся в том, что допускаются функции, имеющие одинаковые имена, но разные сигнатуры. При этом необходимо, чтобы у сигнатур отличались типы аргументов. Прототипы функций с одинаковыми именами и типами аргументов в языке недопустимы.

Тип Ссылка
"""""""""""""""""""""""""""""""""""""""""""""

Тип **Ссылка** (или ссылочный тип) обеспечивает поддержку указателей на различные хранилища определенного типа, что позволяет передавать значения между функциями без их копирования. Основное назначение заключается в дополнительном контроле типов в ходе передач. Синтаксические правила, определяющие описание ссылочного типа:

**Ссылка = ИменованнаяСсылка | СсылкаНаВектор | СсылкаНаРой | СсылкаНаПоток.**

**ИменованнаяСсылка = "&" ИмяТипа.** 

Ссылка обеспечивает доступ к данным, имеющим соответствующий именованный тип. В зависимости от того, каким образом сформированы эти данные, через ссылку может осуществляться как их чтение, так и запись. В последнем случае должен соблюдаться принцип единственного присваивания, если установлена неизменяемость данных.

При взаимодействии с контейнерными данным зачастую вместо именованных типов удобнее использовать данные, имеющие отличающуюся размерность, это затрагивает векторы, массивы, рои. Для описания в этих случаях предлагаются ссылки, в которых размерность не устанавливается:

**СсылкаНаВектор = "&" ИмяТипа "(" ")".**

**СсылкаНаРой = "&" ИмяТипа "[" "]".**

**СсылкаНаПоток = "&" ИмяТипа "{" "}".**

.. note::

    **Тоже пока вызывает много вопросов. Требует проработки... Возникла мысль, что данный тип может и не нужен. Вместо него достаточно использовать соответствующие  ссылки как обозначения, присоединяемые к величинам и хранилищам. Нужно думать...**
    
    *В частности следует отметить, что со ссылками можно связать дополнительный артефакт, обеспечивающий независимое сопровождение при обработке ряда составных типов. Например, очередей и роев. В этом случае формируются дополнительные конструкции, обеспечивающие для каждой из ссылок независимый обход данных. Поэтому нужно думать...*
    
    *В перспективе возможно добавление ссылки на массив:*
    
    **СсылкаНаМассив = "&" ИмяТипа "(" РазмерностьМассива ")".** (???)

Преобразование (приведение) величин разных типов
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Преобразование типов обеспечивает определенную гибкость в манипуляции абстракциями. Можно выделить статическое и динамическое преобразование типов. При статическом преобразовании типов этим процессом занимается компилятор. То есть, все возможные ошибки определяются на этапе компиляции. Динамическое приведение типов осуществляется во время выполнения программы и связано в основном с преобразованиями обобщений посредством функций преобразования типов, которые вводятся в язык для повышения гибкости. Описание этих функций будет сделано при рассмотрении оператора интерпретации. Следует также отметить, что преобразования осуществляются не с самими типами а над величинами, имеющими некоторый тип, которые преобразуются к величинам другого типа.

Статические преобразования типов во время компиляции
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

Возможны следующие статические преобразования типов величин:

#. Тип любой величины может быть преобразован к сигнальному типу. При этом значение исходной величины теряется. По сути сигнальный тип является своеобразным обобщением всех других типов, так как он несет только информацию (сигнал) о готовности данных. Следует также отметить, что получение любого другого типа из сигнального невозможно.

#. Именованный тип любой величины может быть преобразован к типу **union**. В этом случае формируется структура, определяющая любой тип, которая хранит имя преобразуемого типа, а также сохраняет его значения. Дальнейшие манипуляции с полученной величиной, включая преобразование ее типа, при отсутствии системы вывода типов, могут проводиться только во время выполнения программы.

#. Именованный тип, сформированный определением типа в описании **type** на основе другого именованного типа, может быть явно преобразован к своему родительскому типу на этапе компиляции. При этом значение программного артефакта не меняется. Данное приведение позволяет выполнять над имеющимся значением все операции над родительским типом. В принципе, используя механизм трансформации, можно изменить поведение преобразования по умолчанию. При этом может измениться значение величины во время выполнения. Однако тип преобразованного значения все равно определяется во время компиляции.

#. Именованный родительский тип, используемый при определении нового типа в описании **type**, может быть явно преобразован к этому новому типу на этапе компиляции. При этом значение существующей величины не изменяется. Над преобразованной величиной возможны только функции, определенные над этим новым типом. Здесь ситуация обратная предыдущему случаю. То есть, при наличии сформированного набора функций для дочернего типа его можно использовать только после явных приведений к этому типу. Также возможно создание функции трансформации, изменяющей поведение функции используемой по умолчанию.

#. Формируемые в программе величины, имеющие структурный тип, могут быть явно преобразованы к кортежам на этапе компиляции. Это преобразование полезно при использовании различных структур в качестве аргументов функций без дополнительный явных приведений.

.. note::

    *Неявные преобразования структур, векторов и т.д. к кортежам и обратно решил запретить*

Представленные преобразования могут осуществляться только явно. Явные преобразования предполагают непосредственное использование функций приведения типов, обеспечивающих получение соответствующих новых типов. Например::

    apple << @int
    6: apple                      @int     ⇒ @apple
    (3,4):intPair                 @(int, int)  ⇒ @intPair
    (1,2,3,4,5):vector:signal     @(int, int, int, int, int)  ⇒ @int(5)  ⇒ @signal
    
Неявные преобразования запрещены, так как могут привести к коллизиям и неопределенному поведению. Например::

    :+ << func x@intPair->@int {x:tuple:-:return}
    // непонятно, какую функцию сложения использовать
    (3,4):+     ⇒ 7
    // Поэтому:
    (3,4):intPair:+ ⇒ -1

.. note::

    *Обозначение ":+" задает перегрузку знака "+" в качестве функции.*

Возможно ситуация, когда имя функции перегружено, а ее уникальность определяется сигнатурой. В этой ситуации возможны функции с разной сигнатурой, аргументы которых имеют типы, созданные от одного родителя. Тогда невозможно определить, какую из функций подставить. В этой ситуации требуется явное приведение типа. Например::

    apple << @ int;
    pear  << @ int;
    f1 << func x@apple->signal {...}
    f1 << func x@pear->signal {...}
    5:pear:f1       -- явное приведение для выбора нужной функции
    
Преобразование между атомарными константами
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

Зачастую при использовании констант удобнее использовать неявные преобразования для восприятия написанного кода. В частности во многих языках программирования целочисленный ноль (0) в зависимости от контекста может восприниматься как действительное число (0.0).
Аналогичные неявные преобразования значений констант предполагается использовать и в разрабатываемом языке в тех случаях, когда контекст константы очевиден. В частности на данный момент просматриваются следующие неявные преобразования:

Для логических величин вместо **true** и **false** допускается неявно использовать целочисленные константы **0** и **1** соответственно. Эту возможность предполагается использовать для разработки функций, реализующих логические функции, которые впоследствии планируется транслировать в топологию ПЛИС. Удобнее в этом случае манипулировать числами, отображающими битовые значения. Преобразование осуществляется на этапе компиляции.

Данные (величины)
-------------------------------------------

Данные формируются в ходе вычислений. Они отображаются на память компьютера. Если в языке Пифагор для их представления достаточно было использовать результаты выполнения функций, увязанные с обозначениями, то применение статической типизации наряду с этим подходом позволяет, используя принцип единственного присваивания, создавать незаполненные хранилища требуемого типа, которые в ходе вычислений могут наполняться. Идея введения хранилищ непосредственно связана с использование статической типизации. Можно изначально сформировать ресурсы, в которые данные записываются не из одной выполненной функции, а независмо и различных функций параллельной программы. С одной стороны это противоречит принципам функционального программирования, но вполне соответствует управлению вычислениями по готовности данных. Несмотря на усложнение семантики языка, данный подход позволяет повысить эффективность разрабатываемого кода за счет прямого доступа к заранее сформированным хранилищам вместо их формирования и заполнения во время выполнения программы с использованием программоформирующих операторов. При этом ранее используемый функциональный подход остается, что позволяет писать программы и в чисто функциональном стиле.

При описании задается имя хранилища и его тип:

**Хранилище = ИмяХранилища "@" ( ИмяТипа | СоставнойТип | Ссылка ).**

По сути это декларативное описание, предваряющее использование данного имени.

.. note::

    *Следует уточнить и описать подробнее.*
    
    *Есть подозрение, что ссылку как тип можно убрать, сделав ее явным обозначением путем соответствующего именования*
    
    *В принципе хранилища могут быть как внутри функции, так и вне их. Последнее позволяет заполнять хранилища из разных функций, минуя параметры и создавая побочные эффекты. Пока планируется реализовать использование хранилищ только внутри функций.*

Примеры::

    x@int
    y@intPair
    point@(int, int)
    &pointRef@point // ссылка на хранилище point (???) -- пока непонятно...
    vectorRef @&bool() ???
    rectangle@([a,b]@int)

Операторы
--------------

.. note::

  По всей видимости именно отсюда нужно часть текста перенести в описание СТМФППВ.

Операторы языка определяются в соответствии со статически типизированной функционально-потоковой моделью параллельных вычислений. Они обеспечивают формирование каркаса функции. Выделяются операторы группировки и операторы интерпретации.

**Операторы группировки** обеспечивают формирование значений составных типов. К ним относятся:

    * оператор, обеспечивающий создание кортежей (**tuple**);
    * оператор формирования роя (**swarm**);
    * оператор загрузки в очередь (**queue**);
    * оператор задержки (**delay**).

.. note::

    *Наряду с этими основными операторами нужно обратить внимание, что статическая типизация позволяет создавать составные типы с фиксированной структурой, доступ к элементам которых может обеспечиваться записью в отдельные поля с соблюдением принципа единственного присваивания.*
    
    *Необходимо не забыть и описать соответствующие группы* **функций** *для выше определенных типов данных с фиксированной структурой. Это описание необходимо добавить в раздел, посвященный описанию семантики.*
    
**Оператор интерпретации** обеспечивает формирование функциональных преобразований. Один из его входных параметров является функцией, а другой определяет аргумент, обрабатываемый этой функцией. Используются префиксная и постфиксная формы оператора интерпретации. В префиксной форме оператор обозначается знаком **^**. В этом случае функция **F(x)** будет записана ка **F^x**. Оператор интерпретации в постфиксной форме задается двоеточием (**:**), что позволяет записать приведенную функцию в виде **x:F**.

Данный оператор по сути обеспечивает поддержку семантики всех функциональных преобразований, которая представлена в следующем разделе. По сути это единственная явно задаваемая функция языка. Все функциональные преобразования определяются через этот оператор.

Существуют также групповой оператор интерпретации, который предназначен для описания параллельных вычислений. Его синтаксическое отличие заключается в написании каждого из знаков интерпретации дважды: **^^** или **::**. Семантика данного оператора также представлена в следующем разделе.

Функция
-------------------

**Функция** – составной артефакт, конструируемый специальным образом. Она задается
определением, начинающимся с ключевого слова **func** или знака **\\**. Функция состоит из заголовка и тела. В заголовке указывается идентификатор аргумента, обеспечивающего передачу в тело функции необходимых данных и его тип, а также тип результата, возвращаемого из функции. В теле описывается алгоритм обработки аргумента с применением соответствующих элементов языка. Доступ к исходным данным осуществляется только через аргумент. Тело функции состоит из элементов, заключенных в фигурные скобки и разделяемых между собой символом **";"**.

В ходе выполнения функции обычно формируется результат, который возвращается
после применения к нем функции возврата, обозначаемой зарезервированным идентификатором **return**:

``результат:return`` или ``return^результат``

Помимо этого ключевое слово **return** может использоваться в качестве альтернативного варианта точки возврата, когда оно задает не функцию, а обозначение возвращаемого значения:

``результат >> return`` или ``return << результат``

Этот вариант предназначен для случаев, когда из функции необходимо возвратить задержку.

.. note::

    *Наличие подобного свойства еще нужно обдумать... Пока же о реализации говорить рано.*

Возвращаемый результат может быть любым допустимым значением, полученным в
ходе вычислений. Возврат результата может осуществляться до завершения выполнения всех
операций в теле функции, которая продолжает существования до завершения всех
внутренних операций. В этом случае в теле функции будет наблюдаться побочный эффект, который может быть связан либо с какими-то дополнительными фоновыми действиями, либо с ошибкой в ее реализации. Однако повторного возврата, в соответствии с принципом единственного присваивания, произойти не может.
Избавление от побочных эффектов, если они являются лишними, осуществляется путем анализа и оптимизации тела функции соответствующими методами анализа.

Если в качестве результата задается рой, то возможен асинхронный (не одновременный) возврат его независимых элементов. Также в качестве возвращаемого значения может выступать сигнал.

**Функция = ("func" | "\\") [ Аргумент ]**

        **["->" ТипРезультата] [ТелоФункции].**

**Аргумент = ИмяАргумента "@" ИмяТипа**

        **| ИмяАргумента "@" "(" ИмяТипа { "," ИмяТипа } ")"**

        **| "(" ИмяПоля "@" ИмяТипа { "," ИмяПоля "@" ИмяТипа } ")".**

**ТелоФункции = [ "{" [ Элемент {";" Элемент }] "}" ].**

.. note::

    *Пока не проработаны и не включены варианты, связанные с использованием в качестве прямого аргумента очередей и других артефактов. Но скорее всего их добавление пойдет как именованных типов*

При отсутствии в определении функции аргумента предполагается, что он имеет сигнальный тип, использование которого в теле функции не имеет смысла. Однако такой аргумент всегда присутствуе при вызове функции, определяя момент ее запуска. В этом случае сигнал может задаваться константой, указывая на немедленный запуск функции. Или же он может являться вычисляемым значением, что позволяет отложить запуск функции без параметров на некоторое время.

Тип возвращаемого значения также может не указываться. В этом случае предполагается что функция возвращает сигнал. Также возврат сигнального значения может быть задан явно.

Отсутствие у функции тела интерпретируется как ее **предварительное объявление**. Оно
полезно, когда функция еще окончательно не реализована, но знание ее сигнатуры необходимо в других функциях, например, при наличии рекурсивных вызовов. Следует отметить, что окончательное определение функции, включающее ее тело должно быть сформировано до момента сборки программы.

Под программой понимается функция, которая связана с совокупность полностью определенных и взаимосвязанных функций, обеспечивающих решение поставленной задачи.

.. note::

    *Наверное стоит добавить пример функции. Вычисление площади прямоугольника? Более сложные примеры с условиями и прочим наверное лучше добавить при описании семантики, когда будут введены основные конструкции, используемые в примерах.*

Перегрузка имен функций
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

В языке поддерживается статический полиморфизм, реализуемый за счет перегрузки имен функций. Это предполагает идентификацию функций по уникальности сигнатуры, состоящей из имени функции, типа аргумента и типа результата. В целом для идентификации функции используются только ее имя и тип аргумента, так как запрещается использовать функции у которых эти два параметра совпадают.

Определение спецзнаков в качестве имен функций
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Специальные знаки могут использоваться в качестве имен функций за счет их специального обозначения, имеющего следующий формат:

**СпециальноеИмя = ":" Спецзнак.**

Допускается также перегрузка функций, обозначенных специальными именами.

.. note::

    * Тоже стоит добавить пример*
    
    *То есть в языке предполагается допускать пользовательскую перегрузку спецсимволов, не противоречащую их начальному определению на уровне языка. Использование двоеточия в качестве префикса возможно, так как оператор интерпретации перегружать запрещено по определению.*
    
    *Данную возможность предполагается ввести позднее.*

Базовые (предопределенные) функции
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Базовые функции задаются их именами, являющимися зарезервированными словами и спецсимволами. Большинство этих функций могут выполняться во время компиляции константных выражений. Данные функции определяют основные операции, обеспечивающие, наряду с программо-формирующими операторами формирование структуры программы и выполнение предопределенных вычислений.

Блок
-----

**Блок** - это объединение элементов внутри тела функции, служит для логического соединения группы операторов выполняющих законченное действие, а также для локализации обозначений. Он начинается с ключевого слова **block**, за которым следует тело блока, аналогичное телу функции. Отличие тела блока заключается в том, что выход из него осуществляется по обозначению результата зарезервированным идентификатором **break**, с которым связывается значение, возвращаемое из блока. Данное ключевое слова (как и **return**) может выступать в качестве функции или обозначения.

Использование **break** в качестве функции:

``результат:break`` или ``break^результат`` 

Использование **break** в качестве обозначения:

``результат >> break`` или ``break << результат``

Тип значения, возвращаемого из блока, должен быть известен компилятору и определяется из анализа элементов, входящих в блок или явно задается программистом.

**Блок = "block" "{" [ Элемент {";" Элемент }] "}".**

Выражение
-----------

**Выражение** - это терм или цепочка термов, связанных между собой операторами интерпретации. Под термом понимается артефакт, блок или имя ранее обозначенного элемента. Наличие операции интерпретации позволяет трактовать два ее операнда как функцию и аргумент. Существуют префиксная и постфиксная формы записи оператора интерпретации, отличающиеся друг от друга только порядком следования аргумента и функции. Префиксный оператор интерпретации задается стрелкой вверх **"^"** или двойной стрелкой **^^**,
слева от которой стоит терм, выступающий в роли функции, а справа - аргумент::

    F^X 
    Q^^Y 

При постфиксной записи эти же выражения будут выглядеть следующим образом::

    X:F
    Y::Q

В том случае, если оператор интерпретации возвращает ошибку, выполнение текущей функции прекращается. Ошибка порождает соответствующие системные сообщения и инициирует прерывание выполнения программы.

**выражение = терм {( "^" выражение | ":" терм )}.**

**терм = артефакт | блок | идентификатор.**

Приведенный синтаксис выражения показывает, что префиксный оператор интерпретации выполняется справа налево, а постфиксный слева направо. Изменение приоритетов можно осуществить использованием блоков, а также фигурных, квадратных или круглых скобок, являющихся операторами группировки в составные конструкции, и, следовательно, формирователями новых промежуточных артефактов.

Структура программы
--------------------

Программа состоит из множества программных артефактов, взаимосвязанных между собой по контексту, наполнение которого определяется стартовой функцией. Эта функция запускается в начале выполнения программы и содержит вызовы других функций, использует различные типы данных и константы. Исходя из этого совокупность всех артефактов, доступных из стартовой функции и определяет общую структуру программы.

Следует отметить, что все артефакты являются независимыми программными объектами. Они описываются и формируются независимо друг от друга и хранятся в виде отдельных сущностей в общей таблице исходных текстов артефактов. При компиляции для каждого из артефактов формируется его промежуточное представление, которое заносится в общую таблицу этих представлений, называемой таблицей реверсивных информационных графов (РИГ). Также в ходе компиляции создается описание артефакта, определяющее его интерфейс, необходимый для взаимодействия с другими артефактами. Это описание добавляется в таблицу экспорта общей базы данных артефактов, образующей пакет (репозиторий) артефактов.

Разработка программного обеспечения заключается в создании одного или нескольких пакетов, образующих приложение и (или) библиотеки функций. Пакеты могут размещаться на различных системах, включая удаленные. Доступ к внешним пакетам осуществляется через директивы импорта.

.. note::

    *Пока удовлетворюсь этим описанием, которого явно мало.*

Программа содержит множество описаний, каждое из которых обозначено некоторым именем.

**обозначенное_описание = {/ идентификатор "<<" /}**
       **описание {">>"идентификатор}**
        **| [описание">>"] идентификатор {/ ">>" идентификатор /}.**

**$ описание = функция | константное_выражение | описание_типа.**

**Константное выражение** - это любой артефакт языка, вычисляемый на этапе
компиляции, и используемый в последующих выражениях как атомарная константа, вектор или группа, атомами которых на самом нижнем уровне вложенности являются константы:

**константное_выражение = ["const"] значение_константы.**

**значение_константы = целое | булевское | "!".**

Пример::

    pi << const 3.14

